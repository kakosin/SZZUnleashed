{
    "6cdaf9a9ffe77d6a51f4a6beb87b92dfae07b82b": {
        "changes": {
            "src\/core\/quadtree.ts": "MODIFY"
        },
        "diff": {
            "src\/core\/quadtree.ts": [
                {
                    "add": [
                        "498",
                        "    const nodes: NodeKey[] = this.containers[OUTSIDE_BLOCK];"
                    ],
                    "delete": [
                        "498",
                        "    const nodes: NodeKey[] = [];",
                        "503",
                        "    \/\/ If the point is out of the quadtree, return the full outside block:",
                        "504",
                        "    if (x < 0 || y < 0 || x > 1 || y > 1) return this.containers[OUTSIDE_BLOCK];",
                        "505",
                        ""
                    ]
                }
            ]
        }
    },
    "507e74ab1283756ceb548d626affcc15ba39ebc1": {
        "changes": {
            "src\/rendering\/canvas\/edge-label.ts": "MODIFY"
        },
        "diff": {
            "src\/rendering\/canvas\/edge-label.ts": [
                {
                    "add": [
                        "70",
                        "    if (label.length < 4) return;",
                        "71",
                        "  }"
                    ],
                    "delete": [
                        "69",
                        "  }",
                        "71",
                        "  if (label.length < 4) return;"
                    ]
                }
            ]
        }
    },
    "b39e13ab0003193ed5da6cd19bb86507bf20044c": {
        "changes": {
            "src\/captors\/mouse.ts": "MODIFY"
        },
        "diff": {
            "src\/captors\/mouse.ts": [
                {
                    "add": [
                        "194",
                        "    setTimeout(() => (this.hasDragged = false), 0);"
                    ],
                    "delete": [
                        "194",
                        "    setImmediate(() => (this.hasDragged = false));"
                    ]
                }
            ]
        }
    },
    "9e6ce2269844a8f35dbc66687319469997d82946": {
        "changes": {
            "src\/core\/captors\/mouse.ts": "MODIFY"
        },
        "diff": {
            "src\/core\/captors\/mouse.ts": [
                {
                    "add": [
                        "206",
                        "    if (e.target === this.container) {",
                        "207",
                        "      this.emit(\"mousemove\", mouseCoords);",
                        "208",
                        "    }",
                        "210",
                        "    \/\/ Handle the case when \"isMouseDown\" all the time, to allow dragging the",
                        "211",
                        "    \/\/ stage while the mouse is not hover the container:"
                    ],
                    "delete": [
                        "206",
                        "    if (e.target !== this.container) return;",
                        "208",
                        "    this.emit(\"mousemove\", mouseCoords);",
                        "209",
                        "",
                        "211",
                        "      \/\/ TODO: dispatch events"
                    ]
                }
            ]
        }
    },
    "ecd42ed94431e5e44540220e722fe8967d21fcfd": {
        "changes": {
            "src\/renderers\/sigma.renderers.webgl.js": "MODIFY"
        },
        "diff": {
            "src\/renderers\/sigma.renderers.webgl.js": [
                {
                    "add": [
                        "74",
                        "    if (this.settings(options, 'batchEdgesDrawing')) {",
                        "75",
                        "      this.initDOM('canvas', 'edges', true);",
                        "76",
                        "      this.initDOM('canvas', 'nodes', true);",
                        "77",
                        "    } else {",
                        "78",
                        "      this.initDOM('canvas', 'scene', true);",
                        "79",
                        "      this.contexts.nodes = this.contexts.scene;",
                        "80",
                        "      this.contexts.edges = this.contexts.scene;",
                        "81",
                        "    }",
                        "82",
                        ""
                    ],
                    "delete": [
                        "74",
                        "    this.initDOM('canvas', 'scene', true);",
                        "79",
                        "    this.contexts.nodes = this.contexts.scene;",
                        "80",
                        "    this.contexts.edges = this.contexts.scene;",
                        "81",
                        ""
                    ]
                }
            ]
        }
    },
    "7d25687b3316557ae9d3e079a1cf6cb795cf1d21": {
        "changes": {
            "src\/rendering\/webgl\/programs\/node.image.ts": "MODIFY"
        },
        "diff": {
            "src\/rendering\/webgl\/programs\/node.image.ts": [
                {
                    "add": [
                        "132",
                        "      ctx.drawImage(image, xOffset, 0, image.width || 1, image.height || 1);"
                    ],
                    "delete": [
                        "132",
                        "      ctx.drawImage(image, xOffset, 0);"
                    ]
                }
            ]
        }
    },
    "55f107ae7acb48bfcbcb25ae3781f628f3178d10": {
        "changes": {
            "src\/rendering\/webgl\/programs\/node.image.ts": "MODIFY"
        },
        "diff": {
            "src\/rendering\/webgl\/programs\/node.image.ts": [
                {
                    "add": [
                        "18",
                        "  \/\/ maximum size of single texture in atlas",
                        "19",
                        "  MAX_TEXTURE_SIZE = 192,",
                        "20",
                        "  \/\/ maximum width of atlas texture (limited by browser)",
                        "21",
                        "  \/\/ low setting of 3072 works on phones & tablets",
                        "22",
                        "  MAX_CANVAS_WIDTH = 3072;",
                        "59",
                        "  \/\/ next write position in texture",
                        "60",
                        "  let writePositionX = 0;",
                        "61",
                        "  let writePositionY = 0;",
                        "62",
                        "  \/\/ height of current row",
                        "63",
                        "  let writeRowHeight = 0;",
                        "64",
                        "",
                        "65",
                        "  interface PendingImage {",
                        "66",
                        "    image: HTMLImageElement;",
                        "67",
                        "    id: string;",
                        "68",
                        "    size: number;",
                        "69",
                        "  }",
                        "70",
                        "",
                        "104",
                        "    const pendingImages: PendingImage[] = [];",
                        "120",
                        "    const ctx = canvas.getContext(\"2d\", {willReadFrequently: true}) as CanvasRenderingContext2D;",
                        "122",
                        "    \/\/ limit canvas size to avoid browser and platform limits",
                        "123",
                        "    let totalWidth = hasReceivedImages ? textureImage.width : 0;",
                        "124",
                        "    let totalHeight = hasReceivedImages ? textureImage.height : 0;",
                        "126",
                        "    \/\/ initialize image drawing offsets with current write position",
                        "127",
                        "    let xOffset = writePositionX;",
                        "128",
                        "    let yOffset = writePositionY;",
                        "130",
                        "    \/**",
                        "131",
                        "     * Draws a (full or partial) row of images into the atlas texture",
                        "132",
                        "     * @param pendingImages",
                        "133",
                        "     *\/",
                        "134",
                        "    const drawRow = (pendingImages: PendingImage[]) => {",
                        "135",
                        "      \/\/ update canvas size before drawing",
                        "136",
                        "      if (canvas.width !== totalWidth || canvas.height !== totalHeight) {",
                        "137",
                        "        canvas.width = Math.min(MAX_CANVAS_WIDTH, totalWidth);",
                        "138",
                        "        canvas.height = totalHeight;",
                        "139",
                        "",
                        "140",
                        "        \/\/ draw previous texture into resized canvas",
                        "141",
                        "        if (hasReceivedImages) {",
                        "142",
                        "          ctx.putImageData(textureImage, 0, 0);",
                        "143",
                        "        }",
                        "146",
                        "      pendingImages.forEach(({ id, image, size }) => {",
                        "147",
                        "        const imageSizeInTexture = Math.min(MAX_TEXTURE_SIZE, size);",
                        "149",
                        "        \/\/ Crop image, to only keep the biggest square, centered:",
                        "150",
                        "        let dx = 0,",
                        "151",
                        "          dy = 0;",
                        "152",
                        "        if ((image.width || 0) > (image.height || 0)) {",
                        "153",
                        "          dx = (image.width - image.height) \/ 2;",
                        "154",
                        "        } else {",
                        "155",
                        "          dy = (image.height - image.width) \/ 2;",
                        "156",
                        "        }",
                        "157",
                        "        ctx.drawImage(image, dx, dy, size, size, xOffset, yOffset, imageSizeInTexture, imageSizeInTexture);",
                        "158",
                        "",
                        "159",
                        "        \/\/ Update image state:",
                        "160",
                        "        images[id] = {",
                        "161",
                        "          status: \"ready\",",
                        "162",
                        "          x: xOffset,",
                        "163",
                        "          y: yOffset,",
                        "164",
                        "          width: imageSizeInTexture,",
                        "165",
                        "          height: imageSizeInTexture,",
                        "166",
                        "        };",
                        "167",
                        "",
                        "168",
                        "        xOffset += imageSizeInTexture;",
                        "169",
                        "      });",
                        "170",
                        "",
                        "171",
                        "      hasReceivedImages = true;",
                        "172",
                        "      textureImage = ctx.getImageData(0, 0, canvas.width, canvas.height);",
                        "173",
                        "    };",
                        "174",
                        "",
                        "175",
                        "    let rowImages: PendingImage[] = [];",
                        "176",
                        "    pendingImages.forEach((image) => {",
                        "177",
                        "      const { size } = image;",
                        "178",
                        "      const imageSizeInTexture = Math.min(size, MAX_TEXTURE_SIZE);",
                        "179",
                        "",
                        "180",
                        "      if (writePositionX + imageSizeInTexture > MAX_CANVAS_WIDTH) {",
                        "181",
                        "        \/\/ existing row is full: flush row and continue on next line",
                        "182",
                        "        if (rowImages.length > 0) {",
                        "183",
                        "          totalWidth = Math.max(writePositionX, totalWidth);",
                        "184",
                        "          totalHeight = Math.max(writePositionY + writeRowHeight, totalHeight);",
                        "185",
                        "          drawRow(rowImages);",
                        "186",
                        "",
                        "187",
                        "          rowImages = [];",
                        "188",
                        "          writeRowHeight = 0;",
                        "189",
                        "        }",
                        "190",
                        "",
                        "191",
                        "        writePositionX = 0;",
                        "192",
                        "        writePositionY = totalHeight;",
                        "193",
                        "        xOffset = 0;",
                        "194",
                        "        yOffset = totalHeight;",
                        "195",
                        "      }",
                        "196",
                        "",
                        "197",
                        "      \/\/ add image to row",
                        "198",
                        "      rowImages.push(image);",
                        "199",
                        "",
                        "200",
                        "      \/\/ advance write position and update maximum row height",
                        "201",
                        "      writePositionX += imageSizeInTexture;",
                        "202",
                        "      writeRowHeight = Math.max(writeRowHeight, imageSizeInTexture);",
                        "205",
                        "    \/\/ flush pending images in row - keep write position (and drawing cursor)",
                        "206",
                        "    totalWidth = Math.max(writePositionX, totalWidth);",
                        "207",
                        "    totalHeight = Math.max(writePositionY + writeRowHeight, totalHeight);",
                        "208",
                        "    drawRow(rowImages);",
                        "209",
                        "    rowImages = [];",
                        "210",
                        ""
                    ],
                    "delete": [
                        "18",
                        "  MAX_TEXTURE_SIZE = 100;",
                        "88",
                        "    const pendingImages: { image: HTMLImageElement; id: string; size: number }[] = [];",
                        "104",
                        "    const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;",
                        "106",
                        "    canvas.width = pendingImages.reduce((iter, { size }) => iter + size, hasReceivedImages ? textureImage.width : 0);",
                        "107",
                        "    canvas.height = Math.max(hasReceivedImages ? textureImage.height : 0, ...pendingImages.map(({ size }) => size));",
                        "109",
                        "    let xOffset = 0;",
                        "110",
                        "    if (hasReceivedImages) {",
                        "111",
                        "      ctx.putImageData(textureImage, 0, 0);",
                        "112",
                        "      xOffset = textureImage.width;",
                        "113",
                        "    }",
                        "114",
                        "    pendingImages.forEach(({ id, image, size }) => {",
                        "115",
                        "      const imageSizeInTexture = Math.min(MAX_TEXTURE_SIZE, size);",
                        "117",
                        "      \/\/ Crop image, to only keep the biggest square, centered:",
                        "118",
                        "      let dx = 0,",
                        "119",
                        "        dy = 0;",
                        "120",
                        "      if ((image.width || 0) > (image.height || 0)) {",
                        "121",
                        "        dx = (image.width - image.height) \/ 2;",
                        "122",
                        "      } else {",
                        "123",
                        "        dy = (image.height - image.width) \/ 2;",
                        "125",
                        "      ctx.drawImage(image, dx, dy, size, size, xOffset, 0, imageSizeInTexture, imageSizeInTexture);",
                        "127",
                        "      \/\/ Update image state:",
                        "128",
                        "      images[id] = {",
                        "129",
                        "        status: \"ready\",",
                        "130",
                        "        x: xOffset,",
                        "131",
                        "        y: 0,",
                        "132",
                        "        width: imageSizeInTexture,",
                        "133",
                        "        height: imageSizeInTexture,",
                        "134",
                        "      };",
                        "136",
                        "      xOffset += imageSizeInTexture;",
                        "139",
                        "    textureImage = ctx.getImageData(0, 0, canvas.width, canvas.height);",
                        "140",
                        "    hasReceivedImages = true;"
                    ]
                }
            ]
        }
    },
    "6fb5149b277b30e791b683b546fb7296bd9c0908": {
        "changes": {
            "src\/core\/camera.ts": "MODIFY"
        },
        "diff": {
            "src\/core\/camera.ts": [
                {
                    "add": [
                        "139",
                        "    if (typeof state.x === \"number\") this.x = state.x;",
                        "140",
                        "    if (typeof state.y === \"number\") this.y = state.y;",
                        "141",
                        "    if (typeof state.angle === \"number\") this.angle = state.angle;",
                        "142",
                        "    if (typeof state.ratio === \"number\") this.ratio = state.ratio;"
                    ],
                    "delete": [
                        "139",
                        "    if (state.x) this.x = state.x;",
                        "140",
                        "    if (state.y) this.y = state.y;",
                        "141",
                        "    if (state.angle) this.angle = state.angle;",
                        "142",
                        "    if (state.ratio) this.ratio = state.ratio;"
                    ]
                }
            ]
        }
    },
    "7bd4b61f4f892c3531582436cd3213a2a8ef6b52": {
        "changes": {
            "src\/middlewares\/sigma.middlewares.rescale.js": "MODIFY"
        },
        "diff": {
            "src\/middlewares\/sigma.middlewares.rescale.js": [
                {
                    "add": [
                        "98",
                        "      b = +settings('maxNodeSize');",
                        "101",
                        "      b = +settings('minNodeSize');",
                        "109",
                        "      d = +settings('minEdgeSize');",
                        "112",
                        "      d = +settings('minEdgeSize');"
                    ],
                    "delete": [
                        "98",
                        "      b = settings('maxNodeSize');",
                        "101",
                        "      b = settings('minNodeSize');",
                        "109",
                        "      d = settings('minEdgeSize');",
                        "112",
                        "      d = settings('minEdgeSize');"
                    ]
                }
            ]
        }
    },
    "6c82de2a97e73c12ef6ab0f5e9036a412cca57db": {
        "changes": {
            "plugins\/sigma.layout.forceAtlas2\/sigma.layout.forceAtlas2.js": "MODIFY"
        },
        "diff": {
            "plugins\/sigma.layout.forceAtlas2\/sigma.layout.forceAtlas2.js": [
                {
                    "add": [
                        "986",
                        "",
                        "987",
                        "      if (this.forceatlas2.p.autoSettings)",
                        "988",
                        "        this.forceatlas2.setAutoSettings();",
                        "989",
                        ""
                    ],
                    "delete": [
                        "986",
                        "      this.forceatlas2.setAutoSettings();"
                    ]
                }
            ]
        }
    },
    "b4df06e5ead72298ba790d035ec56d3e96d71927": {
        "changes": {
            "website\/index.html": "MODIFY"
        },
        "diff": {
            "website\/index.html": [
                {
                    "add": [
                        "272",
                        "              <a href=\"https:\/\/github.com\/sim51\/react-sigma\">@react-sigma<\/a>. The example on top of this page is",
                        "274",
                        "              <a href=\"https:\/\/github.com\/jacomyal\/sigma.js\/tree\/main\/demo\">sourcecode<\/a> to get"
                    ],
                    "delete": [
                        "272",
                        "              <a href=\"https:\/\/github.com\/sim51\/react-sigma-v2\">react-sigma-v2<\/a>. The example on top of this page is",
                        "274",
                        "              <a href=\"https:\/\/github.com\/jacomyal\/sigma.js\/tree\/main\/examples\/website-showcase\">sourcecode<\/a> to get"
                    ]
                }
            ]
        }
    },
    "f2262f58c13cc4dce9e2dc2acf9e3cfaa3ddf6f1": {
        "changes": {
            "src\/utils\/sigma.utils.js": "MODIFY",
            "src\/captors\/sigma.captors.touch.js": "MODIFY",
            "src\/captors\/sigma.captors.mouse.js": "MODIFY",
            "src\/renderers\/sigma.renderers.webgl.js": "MODIFY",
            "src\/renderers\/sigma.renderers.canvas.js": "MODIFY"
        },
        "diff": {
            "src\/utils\/sigma.utils.js": [
                {
                    "add": [
                        "243",
                        "        self = this,",
                        "244",
                        "        handlers;",
                        "246",
                        "    target._doubleClickHandler = target._doubleClickHandler || {};",
                        "247",
                        "    target._doubleClickHandler[type] = target._doubleClickHandler[type] || [];",
                        "248",
                        "    handlers = target._doubleClickHandler[type];",
                        "249",
                        "",
                        "250",
                        "    handlers.push(function(e) {",
                        "261",
                        "    });",
                        "262",
                        "",
                        "263",
                        "    target.addEventListener(type, handlers[handlers.length - 1], false);",
                        "264",
                        "  };",
                        "265",
                        "",
                        "266",
                        "  \/**",
                        "267",
                        "   * Unbind simulated \"double click\" events.",
                        "268",
                        "   *",
                        "269",
                        "   * @param  {HTMLElement} target   The event target.",
                        "270",
                        "   * @param  {string}      type     The event type.",
                        "271",
                        "   *\/",
                        "272",
                        "  sigma.utils.unbindDoubleClick = function(target, type) {",
                        "273",
                        "    var handler,",
                        "274",
                        "        handlers = (target._doubleClickHandler || {})[type] || [];",
                        "275",
                        "",
                        "276",
                        "    while ((handler = handlers.pop())) {",
                        "277",
                        "      target.removeEventListener(type, handler);",
                        "278",
                        "    }",
                        "279",
                        "",
                        "280",
                        "    delete (target._doubleClickHandler || {})[type];"
                    ],
                    "delete": [
                        "243",
                        "        self = this;",
                        "245",
                        "    target.addEventListener(type, function(e) {",
                        "256",
                        "    }, false);"
                    ]
                }
            ],
            "src\/captors\/sigma.captors.touch.js": [
                {
                    "add": [
                        "60",
                        "    _target.addEventListener('touchstart', _handleStart, false);",
                        "61",
                        "    _target.addEventListener('touchend', _handleLeave, false);",
                        "62",
                        "    _target.addEventListener('touchcancel', _handleLeave, false);",
                        "63",
                        "    _target.addEventListener('touchleave', _handleLeave, false);",
                        "64",
                        "    _target.addEventListener('touchmove', _handleMove, false);",
                        "77",
                        "",
                        "78",
                        "    \/**",
                        "79",
                        "     * This method unbinds every handlers that makes the captor work.",
                        "80",
                        "     *\/",
                        "81",
                        "    this.kill = function() {",
                        "82",
                        "      sigma.utils.unbindDoubleClick(_target, 'touchstart');",
                        "83",
                        "      _target.addEventListener('touchstart', _handleStart);",
                        "84",
                        "      _target.addEventListener('touchend', _handleLeave);",
                        "85",
                        "      _target.addEventListener('touchcancel', _handleLeave);",
                        "86",
                        "      _target.addEventListener('touchleave', _handleLeave);",
                        "87",
                        "      _target.addEventListener('touchmove', _handleMove);",
                        "88",
                        "    };",
                        "89",
                        "",
                        "90",
                        "",
                        "91",
                        "",
                        "92",
                        ""
                    ],
                    "delete": [
                        "60",
                        "    _target.addEventListener('touchstart', _handleStart);",
                        "61",
                        "    _target.addEventListener('touchend', _handleLeave);",
                        "62",
                        "    _target.addEventListener('touchcancel', _handleLeave);",
                        "63",
                        "    _target.addEventListener('touchleave', _handleLeave);",
                        "64",
                        "    _target.addEventListener('touchmove', _handleMove);"
                    ]
                }
            ],
            "src\/captors\/sigma.captors.mouse.js": [
                {
                    "add": [
                        "62",
                        "    \/**",
                        "63",
                        "     * This method unbinds every handlers that makes the captor work.",
                        "64",
                        "     *\/",
                        "65",
                        "    this.kill = function() {",
                        "66",
                        "      sigma.utils.unbindDoubleClick(_target, 'click');",
                        "67",
                        "      _target.removeEventListener('DOMMouseScroll', _wheelHandler);",
                        "68",
                        "      _target.removeEventListener('mousewheel', _wheelHandler);",
                        "69",
                        "      _target.removeEventListener('mousemove', _moveHandler);",
                        "70",
                        "      _target.removeEventListener('mousedown', _downHandler);",
                        "71",
                        "      _target.removeEventListener('click', _clickHandler);",
                        "72",
                        "      _target.removeEventListener('mouseout', _outHandler);",
                        "73",
                        "      document.removeEventListener('mouseup', _upHandler);",
                        "74",
                        "    };",
                        "75",
                        "",
                        "76",
                        "",
                        "77",
                        "",
                        "78",
                        ""
                    ],
                    "delete": []
                }
            ],
            "src\/renderers\/sigma.renderers.webgl.js": [
                {
                    "add": [
                        "102",
                        "    window.addEventListener(",
                        "103",
                        "      'resize',",
                        "104",
                        "      this.boundResize = this.resize.bind(this),",
                        "105",
                        "      false",
                        "106",
                        "    );",
                        "570",
                        "  \/**",
                        "571",
                        "   * This method kills contexts and other attributes.",
                        "572",
                        "   *\/",
                        "573",
                        "  sigma.renderers.webgl.prototype.kill = function() {",
                        "574",
                        "    var k,",
                        "575",
                        "        captor;",
                        "576",
                        "",
                        "577",
                        "    \/\/ Unbind resize:",
                        "578",
                        "    window.removeEventListener('resize', this.boundResize);",
                        "579",
                        "",
                        "580",
                        "    \/\/ Kill captors:",
                        "581",
                        "    while ((captor = this.captors.pop()))",
                        "582",
                        "      captor.kill();",
                        "583",
                        "    delete this.captors;",
                        "584",
                        "",
                        "585",
                        "    \/\/ Kill contexts:",
                        "586",
                        "    for (k in this.domElements) {",
                        "587",
                        "      this.domElements[k].parentNode.removeChild(this.domElements[k]);",
                        "588",
                        "      delete this.domElements[k];",
                        "589",
                        "      delete this.contexts[k];",
                        "590",
                        "    }",
                        "591",
                        "    delete this.domElements;",
                        "592",
                        "    delete this.contexts;",
                        "593",
                        "  };",
                        "594",
                        ""
                    ],
                    "delete": [
                        "102",
                        "    window.addEventListener('resize', function() {",
                        "103",
                        "      _self.resize();",
                        "104",
                        "    });"
                    ]
                }
            ],
            "src\/renderers\/sigma.renderers.canvas.js": [
                {
                    "add": [
                        "98",
                        "    window.addEventListener(",
                        "99",
                        "      'resize',",
                        "100",
                        "      this.boundResize = this.resize.bind(this),",
                        "101",
                        "      false",
                        "102",
                        "    );",
                        "366",
                        "  \/**",
                        "367",
                        "   * This method kills contexts and other attributes.",
                        "368",
                        "   *\/",
                        "369",
                        "  sigma.renderers.canvas.prototype.kill = function() {",
                        "370",
                        "    var k,",
                        "371",
                        "        captor;",
                        "372",
                        "",
                        "373",
                        "    \/\/ Unbind resize:",
                        "374",
                        "    window.removeEventListener('resize', this.boundResize);",
                        "375",
                        "",
                        "376",
                        "    \/\/ Kill captors:",
                        "377",
                        "    while ((captor = this.captors.pop()))",
                        "378",
                        "      captor.kill();",
                        "379",
                        "    delete this.captors;",
                        "380",
                        "",
                        "381",
                        "    \/\/ Kill contexts:",
                        "382",
                        "    for (k in this.domElements) {",
                        "383",
                        "      this.domElements[k].parentNode.removeChild(this.domElements[k]);",
                        "384",
                        "      delete this.domElements[k];",
                        "385",
                        "      delete this.contexts[k];",
                        "386",
                        "    }",
                        "387",
                        "    delete this.domElements;",
                        "388",
                        "    delete this.contexts;",
                        "389",
                        "  };",
                        "390",
                        ""
                    ],
                    "delete": [
                        "98",
                        "    window.addEventListener('resize', function() {",
                        "99",
                        "      self.resize();",
                        "100",
                        "    });"
                    ]
                }
            ]
        }
    },
    "cfd9197f70319109db6b675dd7c82be493ca95a2": {
        "changes": {
            "src\/core\/captors\/mouse.ts": "MODIFY"
        },
        "diff": {
            "src\/core\/captors\/mouse.ts": [
                {
                    "add": [
                        "187",
                        "    setTimeout(() => {",
                        "188",
                        "      this.draggedEvents = 0;",
                        "189",
                        "      this.renderer.refresh();",
                        "190",
                        "    }, 0);"
                    ],
                    "delete": [
                        "187",
                        "    setTimeout(() => (this.draggedEvents = 0), 0);"
                    ]
                }
            ]
        }
    },
    "154408adf4d5df12df88b8d137609327c99fada8": {
        "changes": {
            "src\/core\/captors\/mouse.ts": "MODIFY"
        },
        "diff": {
            "src\/core\/captors\/mouse.ts": [
                {
                    "add": [
                        "149",
                        "    \/\/ We only start dragging on left button",
                        "150",
                        "    if (e.button === 0) {",
                        "151",
                        "      this.startCameraState = this.renderer.getCamera().getState();",
                        "153",
                        "      const { x, y } = getPosition(e, this.container);",
                        "154",
                        "      this.lastMouseX = x;",
                        "155",
                        "      this.lastMouseY = y;",
                        "157",
                        "      this.draggedEvents = 0;",
                        "159",
                        "      this.downStartTime = Date.now();",
                        "160",
                        "      this.isMouseDown = true;",
                        "161",
                        "    }"
                    ],
                    "delete": [
                        "149",
                        "    this.startCameraState = this.renderer.getCamera().getState();",
                        "151",
                        "    const { x, y } = getPosition(e, this.container);",
                        "152",
                        "    this.lastMouseX = x;",
                        "153",
                        "    this.lastMouseY = y;",
                        "155",
                        "    this.draggedEvents = 0;",
                        "157",
                        "    this.downStartTime = Date.now();",
                        "159",
                        "    \/\/ TODO: dispatch events",
                        "160",
                        "    \/\/ Left button pressed",
                        "161",
                        "    this.isMouseDown = true;"
                    ]
                }
            ]
        }
    },
    "3f4852deac199b73a64049ee6e43cf3046b79f49": {
        "changes": {
            "plugins\/sigma.parsers.gexf\/sigma.parsers.gexf.js": "MODIFY"
        },
        "diff": {
            "plugins\/sigma.parsers.gexf\/sigma.parsers.gexf.js": [
                {
                    "add": [
                        "41",
                        "        if (obj.viz && typeof obj.viz === 'object') {",
                        "42",
                        "          if (obj.viz.position && typeof obj.viz.position === 'object') {",
                        "43",
                        "            obj.x = obj.viz.position.x;",
                        "44",
                        "            obj.y = obj.viz.position.y;",
                        "45",
                        "          }",
                        "46",
                        "          obj.size = obj.viz.size;",
                        "47",
                        "          obj.color = obj.viz.color;",
                        "48",
                        "        }"
                    ],
                    "delete": [
                        "41",
                        "        obj.x = obj.viz.position.x;",
                        "42",
                        "        obj.y = obj.viz.position.y;",
                        "43",
                        "        obj.size = obj.viz.size;",
                        "44",
                        "        obj.color = obj.viz.color;"
                    ]
                }
            ]
        }
    },
    "2f6f7ebedab38be62b23f53d646acebf90829fba": {
        "changes": {
            "src\/sigma.ts": "MODIFY"
        },
        "diff": {
            "src\/sigma.ts": [
                {
                    "add": [
                        "539",
                        "    this.activeListeners.dropNodeGraphUpdate = (e: { key: string }): void => {",
                        "540",
                        "      delete this.nodeDataCache[e.key];",
                        "541",
                        "",
                        "542",
                        "      if (this.hoveredNode === e.key) this.hoveredNode = null;",
                        "543",
                        "",
                        "547",
                        "    this.activeListeners.dropEdgeGraphUpdate = (e: { key: string }): void => {",
                        "548",
                        "      delete this.edgeDataCache[e.key];",
                        "549",
                        "",
                        "550",
                        "      if (this.hoveredEdge === e.key) this.hoveredEdge = null;",
                        "551",
                        "",
                        "555",
                        "    this.activeListeners.clearEdgesGraphUpdate = (): void => {",
                        "556",
                        "      this.edgeDataCache = {};",
                        "557",
                        "      this.hoveredEdge = null;",
                        "559",
                        "      this.activeListeners.graphUpdate();",
                        "560",
                        "    };",
                        "561",
                        "",
                        "562",
                        "    this.activeListeners.clearGraphUpdate = (): void => {",
                        "563",
                        "      this.nodeDataCache = {};",
                        "564",
                        "      this.hoveredNode = null;",
                        "565",
                        "",
                        "566",
                        "      this.activeListeners.clearEdgesGraphUpdate();",
                        "567",
                        "    };",
                        "568",
                        "",
                        "569",
                        "    graph.on(\"nodeAdded\", this.activeListeners.graphUpdate);",
                        "570",
                        "    graph.on(\"nodeDropped\", this.activeListeners.dropNodeGraphUpdate);",
                        "573",
                        "    graph.on(\"edgeAdded\", this.activeListeners.graphUpdate);",
                        "574",
                        "    graph.on(\"edgeDropped\", this.activeListeners.dropEdgeGraphUpdate);",
                        "577",
                        "    graph.on(\"edgesCleared\", this.activeListeners.clearEdgesGraphUpdate);",
                        "578",
                        "    graph.on(\"cleared\", this.activeListeners.clearGraphUpdate);",
                        "1688",
                        "    graph.removeListener(\"nodeAdded\", this.activeListeners.dropNodeGraphUpdate);",
                        "1692",
                        "    graph.removeListener(\"edgeAdded\", this.activeListeners.graphUpdate);",
                        "1693",
                        "    graph.removeListener(\"edgeDropped\", this.activeListeners.dropEdgeGraphUpdate);",
                        "1696",
                        "    graph.removeListener(\"edgesCleared\", this.activeListeners.clearEdgesGraphUpdate);",
                        "1697",
                        "    graph.removeListener(\"cleared\", this.activeListeners.clearGraphUpdate);"
                    ],
                    "delete": [
                        "168",
                        "  private nodeKeyToIndex: Record<string, number> = {};",
                        "169",
                        "  private edgeKeyToIndex: Record<string, number> = {};",
                        "220",
                        "    this.initializeCache();",
                        "221",
                        "",
                        "358",
                        "   * Method used to initialize display data cache.",
                        "359",
                        "   *",
                        "360",
                        "   * @return {Sigma}",
                        "361",
                        "   *\/",
                        "362",
                        "  private initializeCache(): void {",
                        "363",
                        "    const graph = this.graph;",
                        "364",
                        "",
                        "365",
                        "    \/\/ NOTE: the data caches are never reset to avoid paying a GC cost",
                        "366",
                        "    \/\/ But this could prove to be a bad decision. In which case just \"reset\"",
                        "367",
                        "    \/\/ them here.",
                        "368",
                        "",
                        "369",
                        "    let i = 0;",
                        "370",
                        "",
                        "371",
                        "    graph.forEachNode((key) => {",
                        "372",
                        "      this.nodeKeyToIndex[key] = i++;",
                        "373",
                        "    });",
                        "374",
                        "",
                        "375",
                        "    i = 0;",
                        "376",
                        "",
                        "377",
                        "    graph.forEachEdge((key) => {",
                        "378",
                        "      this.edgeKeyToIndex[key] = i++;",
                        "379",
                        "    });",
                        "380",
                        "  }",
                        "381",
                        "",
                        "382",
                        "  \/**",
                        "568",
                        "    this.activeListeners.addNodeGraphUpdate = (e: { key: string }): void => {",
                        "569",
                        "      \/\/ Adding entry to cache",
                        "570",
                        "      this.nodeKeyToIndex[e.key] = graph.order - 1;",
                        "574",
                        "    this.activeListeners.addEdgeGraphUpdate = (e: { key: string }): void => {",
                        "575",
                        "      \/\/ Adding entry to cache",
                        "576",
                        "      this.nodeKeyToIndex[e.key] = graph.order - 1;",
                        "580",
                        "    \/\/ TODO: clean cache on drop!",
                        "582",
                        "    \/\/ TODO: bind this on composed state events",
                        "583",
                        "    \/\/ TODO: it could be possible to update only specific node etc. by holding",
                        "584",
                        "    \/\/ a fixed-size pool of updated items",
                        "585",
                        "    graph.on(\"nodeAdded\", this.activeListeners.addNodeGraphUpdate);",
                        "586",
                        "    graph.on(\"nodeDropped\", this.activeListeners.graphUpdate);",
                        "589",
                        "    graph.on(\"edgeAdded\", this.activeListeners.addEdgeGraphUpdate);",
                        "590",
                        "    graph.on(\"edgeDropped\", this.activeListeners.graphUpdate);",
                        "593",
                        "    graph.on(\"edgesCleared\", this.activeListeners.graphUpdate);",
                        "594",
                        "    graph.on(\"cleared\", this.activeListeners.graphUpdate);",
                        "794",
                        "",
                        "795",
                        "      this.nodeKeyToIndex[node] = i;",
                        "855",
                        "",
                        "856",
                        "      this.nodeKeyToIndex[edge] = i;",
                        "1708",
                        "    graph.removeListener(\"nodeAdded\", this.activeListeners.addNodeGraphUpdate);",
                        "1712",
                        "    graph.removeListener(\"edgeAdded\", this.activeListeners.addEdgeGraphUpdate);",
                        "1713",
                        "    graph.removeListener(\"edgeDropped\", this.activeListeners.graphUpdate);",
                        "1716",
                        "    graph.removeListener(\"edgesCleared\", this.activeListeners.graphUpdate);",
                        "1717",
                        "    graph.removeListener(\"cleared\", this.activeListeners.graphUpdate);"
                    ]
                }
            ]
        }
    },
    "ac8da7b6f11176ed59d60d08c8ef886e2fb6fb25": {
        "changes": {
            "src\/core\/captors\/mouse.ts": "MODIFY"
        },
        "diff": {
            "src\/core\/captors\/mouse.ts": [
                {
                    "add": [
                        "203",
                        "",
                        "204",
                        "      \/\/ NOTE: this refresh is here to make sure `hideEdgesOnMove` can work",
                        "205",
                        "      \/\/ when someone releases camera pan drag after having stopped moving.",
                        "206",
                        "      \/\/ See commit: https:\/\/github.com\/jacomyal\/sigma.js\/commit\/cfd9197f70319109db6b675dd7c82be493ca95a2",
                        "207",
                        "      \/\/ See also issue: https:\/\/github.com\/jacomyal\/sigma.js\/issues\/1290",
                        "208",
                        "      \/\/ It could be possible to render instead of scheduling a refresh but for",
                        "209",
                        "      \/\/ now it seems good enough."
                    ],
                    "delete": []
                }
            ]
        }
    },
    "42a5b3108ffca3cccd30d4af695d80a5192ee988": {
        "changes": {
            "src\/rendering\/webgl\/programs\/edge.fast.ts": "MODIFY"
        },
        "diff": {
            "src\/rendering\/webgl\/programs\/edge.fast.ts": [
                {
                    "add": [
                        "79",
                        "      return;"
                    ],
                    "delete": []
                }
            ]
        }
    },
    "ced41eb65e11b098739ac596be056091e0bf0883": {
        "changes": {
            "src\/misc\/sigma.misc.drawHovers.js": "MODIFY"
        },
        "diff": {
            "src\/misc\/sigma.misc.drawHovers.js": [
                {
                    "add": [
                        "18",
                        "        hoveredNodes = {};",
                        "21",
                        "      var node = event.data.node;",
                        "22",
                        "      if (!node.hidden) {",
                        "23",
                        "        hoveredNodes[node.id] = node;",
                        "24",
                        "        draw();",
                        "25",
                        "      }",
                        "29",
                        "      delete hoveredNodes[event.data.node.id];",
                        "42",
                        "          hoveredNode,",
                        "43",
                        "          renderers = sigma.canvas.hovers,",
                        "44",
                        "          embedSettings = self.settings.embedObjects({",
                        "45",
                        "            prefix: prefix",
                        "46",
                        "          });",
                        "52",
                        "        Object.keys(hoveredNodes).length",
                        "54",
                        "        hoveredNode = hoveredNodes[Object.keys(hoveredNodes)[0]];",
                        "55",
                        "        (renderers[hoveredNode.type] || renderers.def)(",
                        "56",
                        "          hoveredNode,",
                        "57",
                        "          self.contexts.hover,",
                        "58",
                        "          embedSettings",
                        "59",
                        "        );",
                        "65",
                        "        !embedSettings('singleHover')",
                        "67",
                        "        for (k in hoveredNodes) {",
                        "68",
                        "          (renderers[hoveredNodes[k].type] || renderers.def)(",
                        "69",
                        "            hoveredNodes[k],",
                        "70",
                        "            self.contexts.hover,",
                        "71",
                        "            embedSettings",
                        "72",
                        "          );"
                    ],
                    "delete": [
                        "18",
                        "      hoveredNodes = [];",
                        "21",
                        "      hoveredNodes.push(event.data.node);",
                        "22",
                        "      draw();",
                        "26",
                        "      var indexCheck = hoveredNodes.map(function(n) {",
                        "27",
                        "        return n;",
                        "28",
                        "      }).indexOf(event.data.node);",
                        "29",
                        "      hoveredNodes.splice(indexCheck, 1);",
                        "42",
                        "        renderers = sigma.canvas.hovers,",
                        "43",
                        "        embedSettings = self.settings.embedObjects({",
                        "44",
                        "          prefix: prefix",
                        "45",
                        "        });",
                        "51",
                        "        hoveredNodes.length",
                        "53",
                        "        if (! hoveredNodes[hoveredNodes.length - 1].hidden) {",
                        "54",
                        "          (",
                        "55",
                        "            renderers[hoveredNodes[hoveredNodes.length - 1].type] ||",
                        "56",
                        "            renderers.def",
                        "57",
                        "          )(",
                        "58",
                        "            hoveredNodes[hoveredNodes.length - 1],",
                        "59",
                        "            self.contexts.hover,",
                        "60",
                        "            embedSettings",
                        "61",
                        "          );",
                        "62",
                        "        }",
                        "68",
                        "        !embedSettings('singleHover') &&",
                        "69",
                        "        hoveredNodes.length",
                        "71",
                        "        for (var i = 0; i < hoveredNodes.length; i++) {",
                        "72",
                        "          if (! hoveredNodes[i].hidden) {",
                        "73",
                        "            (renderers[hoveredNodes[i].type] || renderers.def)(",
                        "74",
                        "              hoveredNodes[i],",
                        "75",
                        "              self.contexts.hover,",
                        "76",
                        "              embedSettings",
                        "77",
                        "            );",
                        "78",
                        "          }",
                        "81",
                        "",
                        "82",
                        ""
                    ]
                }
            ]
        }
    },
    "4f99be7fb901b7ae453b28521307f76b8b53eed0": {
        "changes": {
            "src\/utils\/sigma.utils.js": "MODIFY",
            "src\/captors\/sigma.captors.touch.js": "MODIFY"
        },
        "diff": {
            "src\/utils\/sigma.utils.js": [
                {
                    "add": [
                        "213",
                        "   * Returns the offset of a DOM element.",
                        "214",
                        "   *",
                        "215",
                        "   * @param  {DOMElement} dom The element to retrieve the position.",
                        "216",
                        "   * @return {object}         The offset of the DOM element (top, left).",
                        "217",
                        "   *\/",
                        "218",
                        "  sigma.utils.getOffset = function(dom) {",
                        "219",
                        "    var left = 0,",
                        "220",
                        "        top = 0;",
                        "221",
                        "",
                        "222",
                        "    while (dom) {",
                        "223",
                        "      top = top + parseInt(dom.offsetTop);",
                        "224",
                        "      left = left + parseInt(dom.offsetLeft);",
                        "225",
                        "      dom = dom.offsetParent;",
                        "226",
                        "    }",
                        "227",
                        "",
                        "228",
                        "    return {",
                        "229",
                        "      top: top,",
                        "230",
                        "      left: left",
                        "231",
                        "    };",
                        "232",
                        "  };",
                        "233",
                        "",
                        "234",
                        "  \/**"
                    ],
                    "delete": []
                }
            ],
            "src\/captors\/sigma.captors.touch.js": [
                {
                    "add": [
                        "64",
                        "    function position(e) {",
                        "65",
                        "      var offset = sigma.utils.getOffset(_target);",
                        "66",
                        "",
                        "67",
                        "      return {",
                        "68",
                        "        x: e.pageX - offset.left,",
                        "69",
                        "        y: e.pageY - offset.top",
                        "70",
                        "      };",
                        "71",
                        "    }",
                        "88",
                        "            y1,",
                        "89",
                        "            pos0,",
                        "90",
                        "            pos1;",
                        "105",
                        "            pos0 = position(_downTouches[0]);",
                        "106",
                        "            _startTouchX0 = pos0.x;",
                        "107",
                        "            _startTouchY0 = pos0.y;",
                        "114",
                        "            pos0 = position(_downTouches[0]);",
                        "115",
                        "            pos1 = position(_downTouches[1]);",
                        "116",
                        "            x0 = pos0.x;",
                        "117",
                        "            y0 = pos0.y;",
                        "118",
                        "            x1 = pos1.x;",
                        "119",
                        "            y1 = pos1.y;",
                        "224",
                        "            pos0,",
                        "225",
                        "            pos1,",
                        "247",
                        "            pos0 = position(_downTouches[0]);",
                        "248",
                        "            x0 = pos0.x;",
                        "249",
                        "            y0 = pos0.y;",
                        "273",
                        "            pos0 = position(_downTouches[0]);",
                        "274",
                        "            pos1 = position(_downTouches[1]);",
                        "275",
                        "            x0 = pos0.x;",
                        "276",
                        "            y0 = pos0.y;",
                        "277",
                        "            x1 = pos1.x;",
                        "278",
                        "            y1 = pos1.y;"
                    ],
                    "delete": [
                        "80",
                        "            y1;",
                        "95",
                        "            _startTouchX0 = sigma.utils.getX(_downTouches[0]);",
                        "96",
                        "            _startTouchY0 = sigma.utils.getY(_downTouches[0]);",
                        "103",
                        "            x0 = sigma.utils.getX(_downTouches[0]);",
                        "104",
                        "            y0 = sigma.utils.getY(_downTouches[0]);",
                        "105",
                        "            x1 = sigma.utils.getX(_downTouches[1]);",
                        "106",
                        "            y1 = sigma.utils.getY(_downTouches[1]);",
                        "232",
                        "            x0 = sigma.utils.getX(_downTouches[0]);",
                        "233",
                        "            y0 = sigma.utils.getY(_downTouches[0]);",
                        "257",
                        "            x0 = sigma.utils.getX(_downTouches[0]);",
                        "258",
                        "            y0 = sigma.utils.getY(_downTouches[0]);",
                        "259",
                        "            x1 = sigma.utils.getX(_downTouches[1]);",
                        "260",
                        "            y1 = sigma.utils.getY(_downTouches[1]);"
                    ]
                }
            ]
        }
    },
    "08a6b24aa0cf527f52ea38040fed0d46fb1ad484": {
        "changes": {
            "examples\/mouse-manipulations\/index.ts": "MODIFY",
            "src\/core\/captors\/mouse.ts": "MODIFY"
        },
        "diff": {
            "examples\/mouse-manipulations\/index.ts": [
                {
                    "add": [
                        "49",
                        "renderer.getMouseCaptor().on(\"mousemovebody\", (e) => {"
                    ],
                    "delete": [
                        "49",
                        "renderer.getMouseCaptor().on(\"mousemove\", (e) => {"
                    ]
                }
            ],
            "src\/core\/captors\/mouse.ts": [
                {
                    "add": [
                        "201",
                        "",
                        "202",
                        "    const mouseCoords = getMouseCoords(e, this.container);",
                        "203",
                        "",
                        "204",
                        "    \/\/ Always trigger a \"mousemovebody\" event, so that it is possible to develop",
                        "205",
                        "    \/\/ a drag-and-drop effect that works even when the mouse is out of the",
                        "206",
                        "    \/\/ container:",
                        "207",
                        "    this.emit(\"mousemovebody\", mouseCoords);",
                        "208",
                        "",
                        "209",
                        "    \/\/ Only trigger the \"mousemove\" event when the mouse is actually hovering",
                        "210",
                        "    \/\/ the container, to avoid weirdly hovering nodes and\/or edges when the",
                        "211",
                        "    \/\/ mouse is not hover the container:",
                        "212",
                        "    if (e.target !== this.container) return;",
                        "213",
                        "",
                        "214",
                        "    this.emit(\"mousemove\", mouseCoords);"
                    ],
                    "delete": [
                        "201",
                        "    this.emit(\"mousemove\", getMouseCoords(e, this.container));"
                    ]
                }
            ]
        }
    },
    "2531ff61a068e87734a7eb60935296e2cca64fea": {
        "changes": {
            "src\/sigma.ts": "MODIFY"
        },
        "diff": {
            "src\/sigma.ts": [
                {
                    "add": [
                        "470",
                        "          this.scheduleHighlightedNodesRender();",
                        "471",
                        "          return;",
                        "1131",
                        "    \/\/ 4. Clear hovered nodes layer:",
                        "1132",
                        "    this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT);",
                        "1133",
                        "    \/\/ 5. Render:",
                        "1491",
                        "    this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT);"
                    ],
                    "delete": [
                        "470",
                        "          return this.scheduleHighlightedNodesRender();",
                        "1130",
                        "    \/\/ 4. Render:",
                        "1488",
                        "    this.webGLContexts.hoverNodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT);"
                    ]
                }
            ]
        }
    },
    "6f20727f381f5657debc3322eaab55418ea959a0": {
        "changes": {
            "src\/rendering\/webgl\/programs\/common\/node.ts": "MODIFY"
        },
        "diff": {
            "src\/rendering\/webgl\/programs\/common\/node.ts": [
                {
                    "add": [
                        "117",
                        "      this.programs.forEach((program) => {",
                        "118",
                        "        program.bind();",
                        "119",
                        "        program.bufferData();",
                        "120",
                        "        program.render(params);",
                        "121",
                        "      });"
                    ],
                    "delete": [
                        "117",
                        "      this.programs.forEach((program) => program.render(params));"
                    ]
                }
            ]
        }
    },
    "04743f9e10cb4216de8f6d05cd8aa197102a1f29": {
        "changes": {
            "src\/core\/camera.ts": "MODIFY"
        },
        "diff": {
            "src\/core\/camera.ts": [
                {
                    "add": [
                        "330",
                        "  animatedZoom(factorOrOptions?: number | (Partial<AnimateOptions> & { factor: number })): void {",
                        "350",
                        "  animatedUnzoom(factorOrOptions?: number | (Partial<AnimateOptions> & { factor: number })): void {",
                        "370",
                        "  animatedReset(options?: Partial<AnimateOptions>): void {"
                    ],
                    "delete": [
                        "330",
                        "  animatedZoom(factorOrOptions: number | (Partial<AnimateOptions> & { factor: number })): void {",
                        "350",
                        "  animatedUnzoom(factorOrOptions: number | (Partial<AnimateOptions> & { factor: number })): void {",
                        "370",
                        "  animatedReset(options: Partial<AnimateOptions>): void {"
                    ]
                }
            ]
        }
    },
    "651e9811104d0193f4b741e2ccea8e574eb6475d": {
        "changes": {
            "src\/sigma.ts": "MODIFY"
        },
        "diff": {
            "src\/sigma.ts": [
                {
                    "add": [
                        "737",
                        "      if (typeof data.label === \"string\" && !data.hidden)"
                    ],
                    "delete": [
                        "737",
                        "      if (data.label && !data.hidden)"
                    ]
                }
            ]
        }
    },
    "04addb9ded2793dcda4401fb2ea5e3f7199cbaf3": {
        "changes": {
            "src\/rendering\/webgl\/shaders\/node.vert.glsl": "MODIFY"
        },
        "diff": {
            "src\/rendering\/webgl\/shaders\/node.vert.glsl": [
                {
                    "add": [
                        "27",
                        "  v_border = u_correctionRatio * u_sqrtZoomRatio * u_sqrtZoomRatio;"
                    ],
                    "delete": [
                        "27",
                        "  v_border = u_sqrtZoomRatio * u_sqrtZoomRatio \/ a_size \/ 50.0;"
                    ]
                }
            ]
        }
    },
    "bddca2888ddb5410da063c38162198bcd604af0c": {
        "changes": {
            "src\/sigma.ts": "MODIFY"
        },
        "diff": {
            "src\/sigma.ts": [
                {
                    "add": [
                        "609",
                        "            (edgeDataCache[key].size * transformationRatio) \/ this.cameraSizeRatio,"
                    ],
                    "delete": [
                        "609",
                        "            (edgeAttributes.size * transformationRatio) \/ this.cameraSizeRatio,"
                    ]
                }
            ]
        }
    },
    "4baea75f6cd7045a7e9eacd9ebb0c0b4094b78f7": {
        "changes": {
            "src\/sigma.ts": "MODIFY",
            "src\/core\/captors\/captor.ts": "MODIFY"
        },
        "diff": {
            "src\/sigma.ts": [
                {
                    "add": [
                        "441",
                        "          e.preventSigmaDefault();",
                        "491",
                        "            e.preventSigmaDefault();"
                    ],
                    "delete": [
                        "441",
                        "          this.event.preventSigmaDefault();",
                        "491",
                        "            this.event.preventSigmaDefault();"
                    ]
                }
            ],
            "src\/core\/captors\/captor.ts": [
                {
                    "add": [
                        "40",
                        "  const res: MouseCoords = {",
                        "44",
                        "      res.sigmaDefaultPrevented = true;",
                        "48",
                        "",
                        "49",
                        "  return res;"
                    ],
                    "delete": [
                        "40",
                        "  return {",
                        "44",
                        "      this.sigmaDefaultPrevented = true;"
                    ]
                }
            ]
        }
    },
    "50ccb8bd6876f117ccca0368d5abe33093a88c80": {
        "changes": {
            "src\/core\/captors\/touch.ts": "MODIFY",
            "src\/sigma.ts": "MODIFY"
        },
        "diff": {
            "src\/core\/captors\/touch.ts": [
                {
                    "add": [
                        "15",
                        "export type FakeSigmaMouseEvent = MouseEvent & { isFakeSigmaMouseEvent?: true };",
                        "16",
                        "",
                        "83",
                        "    (mouseEvent as FakeSigmaMouseEvent).isFakeSigmaMouseEvent = true;",
                        "84",
                        ""
                    ],
                    "delete": []
                }
            ],
            "src\/sigma.ts": [
                {
                    "add": [
                        "42",
                        "import TouchCaptor, { FakeSigmaMouseEvent } from \".\/core\/captors\/touch\";",
                        "371",
                        "   * Method that checks whether or not a node collides with a given position.",
                        "372",
                        "   *\/",
                        "373",
                        "  private mouseIsOnNode({ x, y }: Coordinates, { x: nodeX, y: nodeY }: Coordinates, size: number): boolean {",
                        "374",
                        "    return (",
                        "375",
                        "      x > nodeX - size &&",
                        "376",
                        "      x < nodeX + size &&",
                        "377",
                        "      y > nodeY - size &&",
                        "378",
                        "      y < nodeY + size &&",
                        "379",
                        "      Math.sqrt(Math.pow(x - nodeX, 2) + Math.pow(y - nodeY, 2)) < size",
                        "380",
                        "    );",
                        "381",
                        "  }",
                        "382",
                        "",
                        "383",
                        "  \/**",
                        "384",
                        "   * Method that returns all nodes in quad at a given position.",
                        "385",
                        "   *\/",
                        "386",
                        "  private getQuadNodes(position: Coordinates): string[] {",
                        "387",
                        "    const mouseGraphPosition = this.viewportToFramedGraph(position);",
                        "388",
                        "",
                        "389",
                        "    return this.quadtree.point(mouseGraphPosition.x, 1 - mouseGraphPosition.y);",
                        "390",
                        "  }",
                        "391",
                        "",
                        "392",
                        "  \/**",
                        "393",
                        "   * Method that returns the closest node to a given position.",
                        "394",
                        "   *\/",
                        "395",
                        "  private getNodeAtPosition(position: Coordinates): string | null {",
                        "396",
                        "    const { x, y } = position;",
                        "397",
                        "    const quadNodes = this.getQuadNodes(position);",
                        "398",
                        "",
                        "399",
                        "    \/\/ We will hover the node whose center is closest to mouse",
                        "400",
                        "    let minDistance = Infinity,",
                        "401",
                        "      nodeAtPosition = null;",
                        "402",
                        "",
                        "403",
                        "    for (let i = 0, l = quadNodes.length; i < l; i++) {",
                        "404",
                        "      const node = quadNodes[i];",
                        "405",
                        "",
                        "406",
                        "      const data = this.nodeDataCache[node];",
                        "407",
                        "",
                        "408",
                        "      const nodePosition = this.framedGraphToViewport(data);",
                        "409",
                        "",
                        "410",
                        "      const size = this.scaleSize(data.size);",
                        "411",
                        "",
                        "412",
                        "      if (!data.hidden && this.mouseIsOnNode(position, nodePosition, size)) {",
                        "413",
                        "        const distance = Math.sqrt(Math.pow(x - nodePosition.x, 2) + Math.pow(y - nodePosition.y, 2));",
                        "414",
                        "",
                        "415",
                        "        \/\/ TODO: sort by min size also for cases where center is the same",
                        "416",
                        "        if (distance < minDistance) {",
                        "417",
                        "          minDistance = distance;",
                        "418",
                        "          nodeAtPosition = node;",
                        "419",
                        "        }",
                        "420",
                        "      }",
                        "421",
                        "    }",
                        "422",
                        "",
                        "423",
                        "    return nodeAtPosition;",
                        "424",
                        "  }",
                        "425",
                        "",
                        "426",
                        "  \/**",
                        "449",
                        "      const nodeToHover = this.getNodeAtPosition(e);",
                        "469",
                        "        if (!this.mouseIsOnNode(e, pos, size)) {",
                        "499",
                        "        const isFakeSigmaMouseEvent = (e.original as FakeSigmaMouseEvent).isFakeSigmaMouseEvent;",
                        "500",
                        "        const nodeAtPosition = isFakeSigmaMouseEvent ? this.getNodeAtPosition(e) : this.hoveredNode;",
                        "501",
                        "",
                        "502",
                        "        if (nodeAtPosition)",
                        "505",
                        "            node: nodeAtPosition,"
                    ],
                    "delete": [
                        "42",
                        "import TouchCaptor from \".\/core\/captors\/touch\";",
                        "384",
                        "    \/\/ Function checking if the mouse is on the given node",
                        "385",
                        "    const mouseIsOnNode = (mouseX: number, mouseY: number, nodeX: number, nodeY: number, size: number): boolean => {",
                        "386",
                        "      return (",
                        "387",
                        "        mouseX > nodeX - size &&",
                        "388",
                        "        mouseX < nodeX + size &&",
                        "389",
                        "        mouseY > nodeY - size &&",
                        "390",
                        "        mouseY < nodeY + size &&",
                        "391",
                        "        Math.sqrt(Math.pow(mouseX - nodeX, 2) + Math.pow(mouseY - nodeY, 2)) < size",
                        "392",
                        "      );",
                        "393",
                        "    };",
                        "394",
                        "",
                        "395",
                        "    \/\/ Function returning the nodes in the mouse's quad",
                        "396",
                        "    const getQuadNodes = (mouseX: number, mouseY: number) => {",
                        "397",
                        "      const mouseGraphPosition = this.viewportToFramedGraph({ x: mouseX, y: mouseY });",
                        "398",
                        "",
                        "399",
                        "      \/\/ TODO: minus 1? lol",
                        "400",
                        "      return this.quadtree.point(mouseGraphPosition.x, 1 - mouseGraphPosition.y);",
                        "401",
                        "    };",
                        "402",
                        "",
                        "405",
                        "      \/\/ NOTE: for the canvas renderer, testing the pixel's alpha should",
                        "406",
                        "      \/\/ give some boost but this slows things down for WebGL empirically.",
                        "407",
                        "",
                        "408",
                        "      const quadNodes = getQuadNodes(e.x, e.y);",
                        "409",
                        "",
                        "417",
                        "      \/\/ We will hover the node whose center is closest to mouse",
                        "418",
                        "      let minDistance = Infinity,",
                        "419",
                        "        nodeToHover = null;",
                        "420",
                        "",
                        "421",
                        "      for (let i = 0, l = quadNodes.length; i < l; i++) {",
                        "422",
                        "        const node = quadNodes[i];",
                        "423",
                        "",
                        "424",
                        "        const data = this.nodeDataCache[node];",
                        "425",
                        "",
                        "426",
                        "        const pos = this.framedGraphToViewport(data);",
                        "427",
                        "",
                        "428",
                        "        const size = this.scaleSize(data.size);",
                        "429",
                        "",
                        "430",
                        "        if (!data.hidden && mouseIsOnNode(e.x, e.y, pos.x, pos.y, size)) {",
                        "431",
                        "          const distance = Math.sqrt(Math.pow(e.x - pos.x, 2) + Math.pow(e.y - pos.y, 2));",
                        "432",
                        "",
                        "433",
                        "          \/\/ TODO: sort by min size also for cases where center is the same",
                        "434",
                        "          if (distance < minDistance) {",
                        "435",
                        "            minDistance = distance;",
                        "436",
                        "            nodeToHover = node;",
                        "437",
                        "          }",
                        "438",
                        "        }",
                        "439",
                        "      }",
                        "459",
                        "        if (!mouseIsOnNode(e.x, e.y, pos.x, pos.y, size)) {",
                        "489",
                        "        if (this.hoveredNode)",
                        "492",
                        "            node: this.hoveredNode,"
                    ]
                }
            ]
        }
    },
    "0c30563af11bf6a63eeaa44af3d442c5137778a7": {
        "changes": {
            "src\/sigma.ts": "MODIFY"
        },
        "diff": {
            "src\/sigma.ts": [
                {
                    "add": [
                        "691",
                        "    for (const type in this.nodePrograms) {",
                        "696",
                        "      if (!keepArrays) this.nodePrograms[type].allocate(nodesPerPrograms[type] || 0);",
                        "754",
                        "    for (const type in this.edgePrograms) {",
                        "759",
                        "      if (!keepArrays) this.edgePrograms[type].allocate(edgesPerPrograms[type] || 0);"
                    ],
                    "delete": [
                        "691",
                        "    for (const type in nodesPerPrograms) {",
                        "696",
                        "      if (!keepArrays) this.nodePrograms[type].allocate(nodesPerPrograms[type]);",
                        "754",
                        "    for (const type in edgesPerPrograms) {",
                        "759",
                        "      if (!keepArrays) this.edgePrograms[type].allocate(edgesPerPrograms[type]);"
                    ]
                }
            ]
        }
    },
    "e4f224b4217c5bf6aaa666c61d2289d6daacabfb": {
        "changes": {
            "src\/renderers\/sigma.renderers.canvas.js": "MODIFY"
        },
        "diff": {
            "src\/renderers\/sigma.renderers.canvas.js": [
                {
                    "add": [
                        "136",
                        "        tempGCO,",
                        "209",
                        "          tempGCO = this.contexts.edges.globalCompositeOperation;",
                        "210",
                        "          this.contexts.edges.globalCompositeOperation = 'destination-over';",
                        "211",
                        "",
                        "224",
                        "          \/\/ Restore original globalCompositeOperation:",
                        "225",
                        "          this.contexts.edges.globalCompositeOperation = tempGCO;",
                        "226",
                        ""
                    ],
                    "delete": []
                }
            ]
        }
    },
    "624859a467578a2cd21e265096c589665dd788be": {
        "changes": {
            "src\/core\/camera.ts": "MODIFY"
        },
        "diff": {
            "src\/core\/camera.ts": [
                {
                    "add": [
                        "224",
                        "      if (typeof validState.x === \"number\") newState.x = initialState.x + (validState.x - initialState.x) * coefficient;",
                        "225",
                        "      if (typeof validState.y === \"number\") newState.y = initialState.y + (validState.y - initialState.y) * coefficient;",
                        "226",
                        "      if (typeof validState.angle === \"number\")",
                        "227",
                        "        newState.angle = initialState.angle + (validState.angle - initialState.angle) * coefficient;",
                        "228",
                        "      if (typeof validState.ratio === \"number\")",
                        "229",
                        "        newState.ratio = initialState.ratio + (validState.ratio - initialState.ratio) * coefficient;"
                    ],
                    "delete": [
                        "224",
                        "      if (validState.x) newState.x = initialState.x + (validState.x - initialState.x) * coefficient;",
                        "225",
                        "      if (validState.y) newState.y = initialState.y + (validState.y - initialState.y) * coefficient;",
                        "226",
                        "      if (validState.angle) newState.angle = initialState.angle + (validState.angle - initialState.angle) * coefficient;",
                        "227",
                        "      if (validState.ratio) newState.ratio = initialState.ratio + (validState.ratio - initialState.ratio) * coefficient;"
                    ]
                }
            ]
        }
    },
    "2295f5f876bc51bf4322a25b3857bf7400c9689c": {
        "changes": {
            "src\/rendering\/webgl\/shaders\/node.image.frag.glsl": "MODIFY",
            "src\/rendering\/webgl\/shaders\/edge.frag.glsl": "MODIFY",
            "src\/rendering\/webgl\/shaders\/node.fast.frag.glsl": "MODIFY"
        },
        "diff": {
            "src\/rendering\/webgl\/shaders\/node.image.frag.glsl": [
                {
                    "add": [
                        "9",
                        "const vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);"
                    ],
                    "delete": [
                        "11",
                        "  vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);"
                    ]
                }
            ],
            "src\/rendering\/webgl\/shaders\/edge.frag.glsl": [
                {
                    "add": [
                        "19",
                        "}"
                    ],
                    "delete": [
                        "9",
                        "",
                        "20",
                        "}"
                    ]
                }
            ],
            "src\/rendering\/webgl\/shaders\/node.fast.frag.glsl": [
                {
                    "add": [
                        "6",
                        "const vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);",
                        "18",
                        "  gl_FragColor = mix(transparent, v_color, t);"
                    ],
                    "delete": [
                        "8",
                        "  vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);",
                        "18",
                        "  gl_FragColor = mix(color0, v_color, t);"
                    ]
                }
            ]
        }
    },
    "c7cd9520bcc41da5a44ff917e6acd2316a9c53c5": {
        "changes": {
            "plugins\/sigma.layout.forceAtlas2\/supervisor.js": "MODIFY"
        },
        "diff": {
            "plugins\/sigma.layout.forceAtlas2\/supervisor.js": [
                {
                    "add": [
                        "230",
                        "    if (!this.supervisor)",
                        "231",
                        "      this.supervisor = new Supervisor(this);",
                        "235",
                        "      this.supervisor.configure(config);",
                        "238",
                        "    this.supervisor.start();",
                        "244",
                        "    if (!this.supervisor)",
                        "248",
                        "    this.supervisor.stop();",
                        "254",
                        "    if (!this.supervisor)",
                        "258",
                        "    this.supervisor.stop();",
                        "261",
                        "    this.supervisor.killWorker();",
                        "264",
                        "    this.supervisor = null;",
                        "270",
                        "    if (!this.supervisor)",
                        "271",
                        "      this.supervisor = new Supervisor(this);",
                        "273",
                        "    this.supervisor.configure(config);",
                        "279",
                        "    return this.supervisor && this.supervisor.running;"
                    ],
                    "delete": [
                        "227",
                        "  var supervisor = null;",
                        "228",
                        "",
                        "232",
                        "    if (!supervisor)",
                        "233",
                        "      supervisor = new Supervisor(this);",
                        "237",
                        "      supervisor.configure(config);",
                        "240",
                        "    supervisor.start();",
                        "246",
                        "    if (!supervisor)",
                        "250",
                        "    supervisor.stop();",
                        "256",
                        "    if (!supervisor)",
                        "260",
                        "    supervisor.stop();",
                        "263",
                        "    supervisor.killWorker();",
                        "266",
                        "    supervisor = null;",
                        "272",
                        "    if (!supervisor)",
                        "273",
                        "      supervisor = new Supervisor(this);",
                        "275",
                        "    supervisor.configure(config);",
                        "281",
                        "    return supervisor && supervisor.running;"
                    ]
                }
            ]
        }
    },
    "f44fdba63a5f88826aee796674795c3d3e662061": {
        "changes": {
            "src\/sigma.ts": "MODIFY"
        },
        "diff": {
            "src\/sigma.ts": [
                {
                    "add": [
                        "6",
                        "import extend from \"@yomguithereal\/helpers\/extend\";",
                        "47",
                        " * Constants.",
                        "48",
                        " *\/",
                        "49",
                        "const X_LABEL_MARGIN = 150;",
                        "50",
                        "const Y_LABEL_MARGIN = 50;",
                        "51",
                        "",
                        "52",
                        "\/**",
                        "959",
                        "    const labelsToDisplay = this.labelGrid.getLabelsToDisplay(cameraState.ratio, this.settings.labelDensity);",
                        "960",
                        "    extend(labelsToDisplay, this.nodesWithForcedLabels);",
                        "961",
                        "",
                        "973",
                        "      \/\/ NOTE: we can do better probably",
                        "981",
                        "      \/\/ NOTE: we can cache the labels we need to render until the camera's ratio changes",
                        "984",
                        "      \/\/ Is node big enough?",
                        "987",
                        "      \/\/ Is node actually on screen (with some margin)",
                        "988",
                        "      \/\/ NOTE: we used to rely on the quadtree for this, but the coordinates",
                        "989",
                        "      \/\/ conversion make it unreliable and at that point we already converted",
                        "990",
                        "      \/\/ to viewport coordinates and since the label grid already culls the",
                        "991",
                        "      \/\/ number of potential labels to display this looks like a good",
                        "992",
                        "      \/\/ performance compromise.",
                        "993",
                        "      \/\/ NOTE: labelGrid.getLabelsToDisplay could probably optimize by not",
                        "994",
                        "      \/\/ considering cells obviously outside of the range of the current",
                        "995",
                        "      \/\/ view rectangle.",
                        "996",
                        "      if (",
                        "997",
                        "        x < -X_LABEL_MARGIN ||",
                        "998",
                        "        x > this.width + X_LABEL_MARGIN ||",
                        "999",
                        "        y < -Y_LABEL_MARGIN ||",
                        "1000",
                        "        y > this.height + Y_LABEL_MARGIN",
                        "1001",
                        "      )",
                        "1002",
                        "        continue;"
                    ],
                    "delete": [
                        "951",
                        "    \/\/ Finding visible nodes to display their labels",
                        "952",
                        "    let visibleNodes: Set<string>;",
                        "953",
                        "",
                        "954",
                        "    if (cameraState.ratio >= 1) {",
                        "955",
                        "      \/\/ Camera is unzoomed so no need to ask the quadtree for visible nodes",
                        "956",
                        "      visibleNodes = new Set(this.graph.nodes());",
                        "957",
                        "    } else {",
                        "958",
                        "      \/\/ Let's ask the quadtree",
                        "959",
                        "      const viewRectangle = this.viewRectangle();",
                        "960",
                        "",
                        "961",
                        "      visibleNodes = new Set(",
                        "962",
                        "        this.quadtree.rectangle(",
                        "963",
                        "          viewRectangle.x1,",
                        "964",
                        "          1 - viewRectangle.y1,",
                        "965",
                        "          viewRectangle.x2,",
                        "966",
                        "          1 - viewRectangle.y2,",
                        "967",
                        "          viewRectangle.height,",
                        "968",
                        "        ),",
                        "969",
                        "      );",
                        "970",
                        "    }",
                        "971",
                        "",
                        "973",
                        "    \/\/ TODO: drop gridsettings likewise",
                        "974",
                        "    \/\/ TODO: optimize through visible nodes",
                        "975",
                        "    const labelsToDisplay = this.labelGrid",
                        "976",
                        "      .getLabelsToDisplay(cameraState.ratio, this.settings.labelDensity)",
                        "977",
                        "      .concat(this.nodesWithForcedLabels);",
                        "996",
                        "      \/\/ TODO: we can cache the labels we need to render until the camera's ratio changes",
                        "997",
                        "      \/\/ TODO: this should be computed in the canvas components?",
                        "1002",
                        "      if (!visibleNodes.has(node)) continue;",
                        "1004",
                        "      \/\/ TODO:"
                    ]
                }
            ]
        }
    },
    "1559baabdecdcbe721f954d14e463f352f934b8b": {
        "changes": {
            "src\/sigma.ts": "MODIFY"
        },
        "diff": {
            "src\/sigma.ts": [
                {
                    "add": [
                        "187",
                        "    for (const key in this.webGLContexts) {",
                        "188",
                        "      const gl = this.webGLContexts[key];",
                        "190",
                        "      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);",
                        "191",
                        "      gl.enable(gl.BLEND);",
                        "192",
                        "    }"
                    ],
                    "delete": [
                        "187",
                        "    let gl = this.webGLContexts.nodes;",
                        "189",
                        "    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);",
                        "190",
                        "    gl.enable(gl.BLEND);",
                        "191",
                        "",
                        "192",
                        "    gl = this.webGLContexts.edges;",
                        "193",
                        "",
                        "194",
                        "    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);",
                        "195",
                        "    gl.enable(gl.BLEND);"
                    ]
                }
            ]
        }
    },
    "7a1e123ded68521ce0b79756c7dbef13255f003d": {
        "changes": {
            "src\/rendering\/webgl\/programs\/node.ts": "MODIFY"
        },
        "diff": {
            "src\/rendering\/webgl\/programs\/node.ts": [
                {
                    "add": [
                        "18",
                        "const POINTS = 3;",
                        "19",
                        "const ATTRIBUTES = 5;",
                        "21",
                        "const ANGLE_1 = 0;",
                        "22",
                        "const ANGLE_2 = (2 * Math.PI) \/ 3;",
                        "23",
                        "const ANGLE_3 = (4 * Math.PI) \/ 3;",
                        "100",
                        "      for (let l = i + POINTS * ATTRIBUTES; i < l; i++) array[i] = 0;"
                    ],
                    "delete": [
                        "18",
                        "const POINTS = 3,",
                        "19",
                        "  ATTRIBUTES = 5;",
                        "21",
                        "const ANGLE_1 = 0,",
                        "22",
                        "  ANGLE_2 = (2 * Math.PI) \/ 3,",
                        "23",
                        "  ANGLE_3 = (4 * Math.PI) \/ 3;",
                        "100",
                        "      array[i++] = 0;",
                        "101",
                        "      array[i++] = 0;",
                        "102",
                        "      array[i++] = 0;",
                        "103",
                        "      array[i++] = 0;",
                        "104",
                        "      array[i++] = 0;"
                    ]
                }
            ]
        }
    },
    "bd667b2e0d3c9d633eb77178c997667f67e2343e": {
        "changes": {
            "src\/utils\/index.ts": "MODIFY",
            "src\/sigma.ts": "MODIFY"
        },
        "diff": {
            "src\/utils\/index.ts": [
                {
                    "add": [
                        "132",
                        "  if (!graph.order) return { x: [0, 1], y: [0, 1] };",
                        "133",
                        "",
                        "170",
                        "  let ratio = Math.max(maxX - minX, maxY - minY),",
                        "171",
                        "    dX = (maxX + minX) \/ 2,",
                        "174",
                        "  if (ratio === 0 || Math.abs(ratio) === Infinity || isNaN(ratio)) ratio = 1;",
                        "175",
                        "  if (isNaN(dX)) dX = 0;",
                        "176",
                        "  if (isNaN(dY)) dY = 0;",
                        "177",
                        ""
                    ],
                    "delete": [
                        "168",
                        "  let ratio = Math.max(maxX - minX, maxY - minY);",
                        "169",
                        "",
                        "170",
                        "  if (ratio === 0) ratio = 1;",
                        "171",
                        "",
                        "172",
                        "  const dX = (maxX + minX) \/ 2,"
                    ]
                }
            ],
            "src\/sigma.ts": [
                {
                    "add": [
                        "172",
                        "    x: [0, 1],",
                        "173",
                        "    y: [0, 1],",
                        "1621",
                        "    const res = multiplyVec2(invMatrix, {",
                        "1625",
                        "",
                        "1626",
                        "    if (isNaN(res.x)) res.x = 0;",
                        "1627",
                        "    if (isNaN(res.y)) res.y = 0;",
                        "1628",
                        "",
                        "1629",
                        "    return res;"
                    ],
                    "delete": [
                        "172",
                        "    x: [-Infinity, Infinity],",
                        "173",
                        "    y: [-Infinity, Infinity],",
                        "1621",
                        "    return multiplyVec2(invMatrix, {"
                    ]
                }
            ]
        }
    },
    "984eb8c316c1b935e8eda1adfad36fe9ba4c3652": {
        "changes": {
            "src\/core\/quadtree.ts": "MODIFY"
        },
        "diff": {
            "src\/core\/quadtree.ts": [
                {
                    "add": [
                        "551",
                        "    extend(this.cache, this.containers[OUTSIDE_BLOCK]);"
                    ],
                    "delete": [
                        "551",
                        "    this.cache.push(...this.containers[OUTSIDE_BLOCK]);"
                    ]
                }
            ]
        }
    },
    "8036d6041be2e18cc32041b30c662537b54f6cb5": {
        "changes": {
            "src\/core\/captors\/touch.ts": "MODIFY",
            "src\/core\/captors\/captor.ts": "MODIFY",
            "src\/core\/captors\/mouse.ts": "MODIFY",
            "examples\/mouse-manipulations\/index.html": "MODIFY"
        },
        "diff": {
            "src\/core\/captors\/touch.ts": [
                {
                    "add": [
                        "64",
                        "    const mousePosition = position || getPosition(e.touches[0], this.container);",
                        "98",
                        "    this.emit(\"touchdown\", getTouchCoords(e, this.container));",
                        "152",
                        "    this.emit(\"touchup\", getTouchCoords(e, this.container));",
                        "242",
                        "    this.emit(\"touchmove\", getTouchCoords(e, this.container));"
                    ],
                    "delete": [
                        "64",
                        "    const mousePosition = position || getPosition(e.touches[0]);",
                        "98",
                        "    this.emit(\"touchdown\", getTouchCoords(e));",
                        "152",
                        "    this.emit(\"touchup\", getTouchCoords(e));",
                        "242",
                        "    this.emit(\"touchmove\", getTouchCoords(e));"
                    ]
                }
            ],
            "src\/core\/captors\/captor.ts": [
                {
                    "add": [
                        "20",
                        " * @param  {event}       e - A mouse event or touch object.",
                        "21",
                        " * @param  {HTMLElement} dom - A DOM element to compute offset relatively to.",
                        "22",
                        " * @return {number}      The local Y value of the mouse.",
                        "24",
                        "export function getPosition(e: MouseEvent | Touch, dom: HTMLElement): Coordinates {",
                        "26",
                        "",
                        "28",
                        "    x: e.clientX - bbox.left,",
                        "29",
                        "    y: e.clientY - bbox.top,",
                        "36",
                        " * @param  {event}       e   - A mouse event or touch object.",
                        "37",
                        " * @param  {HTMLElement} dom - A DOM element to compute offset relatively to.",
                        "40",
                        "export function getMouseCoords(e: MouseEvent, dom: HTMLElement): MouseCoords {",
                        "42",
                        "    ...getPosition(e, dom),",
                        "60",
                        " * @param  {event}       e   - A wheel mouse event.",
                        "61",
                        " * @param  {HTMLElement} dom - A DOM element to compute offset relatively to.",
                        "64",
                        "export function getWheelCoords(e: WheelEvent, dom: HTMLElement): WheelCoords {",
                        "66",
                        "    ...getMouseCoords(e, dom),",
                        "81",
                        " *",
                        "82",
                        " * @param  {event}       e   - A touch event.",
                        "83",
                        " * @param  {HTMLElement} dom - A DOM element to compute offset relatively to.",
                        "84",
                        " * @return {object}",
                        "86",
                        "export function getTouchCoords(e: TouchEvent, dom: HTMLElement): TouchCoords {"
                    ],
                    "delete": [
                        "15",
                        " * Extract the local X position from a mouse event or touch object.",
                        "16",
                        " *",
                        "17",
                        " * @param  {event}  e - A mouse event or touch object.",
                        "18",
                        " * @return {number}     The local X value of the mouse.",
                        "19",
                        " *\/",
                        "20",
                        "export function getX(e: MouseEvent | Touch): number {",
                        "21",
                        "  if (typeof (e as MouseEvent).offsetX !== \"undefined\") return (e as MouseEvent).offsetX;",
                        "22",
                        "",
                        "23",
                        "  if (typeof e.clientX !== \"undefined\") return e.clientX;",
                        "24",
                        "",
                        "25",
                        "  throw new Error(\"Captor: could not extract x from event.\");",
                        "26",
                        "}",
                        "27",
                        "",
                        "28",
                        "\/**",
                        "29",
                        " * Extract the local Y position from a mouse event or touch object.",
                        "30",
                        " *",
                        "31",
                        " * @param  {event}  e - A mouse event or touch object.",
                        "32",
                        " * @return {number}     The local Y value of the mouse.",
                        "33",
                        " *\/",
                        "34",
                        "export function getY(e: MouseEvent | Touch): number {",
                        "35",
                        "  if (typeof (e as MouseEvent).offsetY !== \"undefined\") return (e as MouseEvent).offsetY;",
                        "36",
                        "",
                        "37",
                        "  if (typeof e.clientY !== \"undefined\") return e.clientY;",
                        "38",
                        "",
                        "39",
                        "  throw new Error(\"Captor: could not extract y from event.\");",
                        "40",
                        "}",
                        "41",
                        "",
                        "42",
                        "\/**",
                        "48",
                        " * @param  {event}        e - A mouse event or touch object.",
                        "49",
                        " * @param  {HTMLElement?} dom - A DOM element to compute offset relatively to.",
                        "50",
                        " * @return {number}       The local Y value of the mouse.",
                        "52",
                        "export function getPosition(e: MouseEvent | Touch, dom?: HTMLElement): Coordinates {",
                        "53",
                        "  if (!dom) {",
                        "54",
                        "    return {",
                        "55",
                        "      x: getX(e),",
                        "56",
                        "      y: getY(e),",
                        "57",
                        "    };",
                        "58",
                        "  }",
                        "59",
                        "",
                        "62",
                        "    x: e.pageX - bbox.left,",
                        "63",
                        "    y: e.pageY - bbox.top,",
                        "70",
                        " * @param  {event}  e - A mouse event or touch object.",
                        "73",
                        "export function getMouseCoords(e: MouseEvent): MouseCoords {",
                        "75",
                        "    x: getX(e),",
                        "76",
                        "    y: getY(e),",
                        "94",
                        " * @param  {event}  e - A wheel mouse event.",
                        "97",
                        "export function getWheelCoords(e: WheelEvent): WheelCoords {",
                        "99",
                        "    ...getMouseCoords(e),",
                        "115",
                        "export function getTouchCoords(e: TouchEvent, dom?: HTMLElement): TouchCoords {"
                    ]
                }
            ],
            "src\/core\/captors\/mouse.ts": [
                {
                    "add": [
                        "102",
                        "    if (this.draggedEvents < DRAGGED_EVENTS_TOLERANCE) this.emit(\"click\", getMouseCoords(e, this.container));",
                        "108",
                        "    this.emit(\"rightClick\", getMouseCoords(e, this.container));",
                        "118",
                        "    const mouseCoords = getMouseCoords(e, this.container);",
                        "153",
                        "        this.emit(\"mousedown\", getMouseCoords(e, this.container));",
                        "196",
                        "    this.emit(\"mouseup\", getMouseCoords(e, this.container));",
                        "201",
                        "    this.emit(\"mousemove\", getMouseCoords(e, this.container));",
                        "261",
                        "    const wheelCoords = getWheelCoords(e, this.container);"
                    ],
                    "delete": [
                        "102",
                        "    if (this.draggedEvents < DRAGGED_EVENTS_TOLERANCE) this.emit(\"click\", getMouseCoords(e));",
                        "108",
                        "    this.emit(\"rightClick\", getMouseCoords(e));",
                        "118",
                        "    const mouseCoords = getMouseCoords(e);",
                        "153",
                        "        this.emit(\"mousedown\", getMouseCoords(e));",
                        "196",
                        "    this.emit(\"mouseup\", getMouseCoords(e));",
                        "201",
                        "    this.emit(\"mousemove\", getMouseCoords(e));",
                        "261",
                        "    const wheelCoords = getWheelCoords(e);"
                    ]
                }
            ],
            "examples\/mouse-manipulations\/index.html": [
                {
                    "add": [
                        "11",
                        "      body {",
                        "13",
                        "        background: #f9f9f9;",
                        "15",
                        "      main {",
                        "16",
                        "        margin: auto;",
                        "17",
                        "        max-width: 800px;",
                        "18",
                        "      }",
                        "19",
                        "      #sigma-container {",
                        "20",
                        "        height: 600px;",
                        "21",
                        "        background: white;",
                        "24",
                        "    <main>",
                        "25",
                        "      <p>",
                        "26",
                        "        <strong>",
                        "27",
                        "          To be able to test the integration of sigma and its mouse interaction capabilities in a scrollable webpage, we",
                        "28",
                        "          added some random texts around the container.",
                        "29",
                        "        <\/strong>",
                        "30",
                        "      <\/p>",
                        "31",
                        "      <p>",
                        "32",
                        "        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla a justo vel velit efficitur ullamcorper non ut",
                        "33",
                        "        augue. Nunc ultrices massa nulla, non rutrum justo accumsan eget. Aenean volutpat pharetra dolor, in mollis",
                        "34",
                        "        felis consectetur faucibus. Vestibulum varius ligula et tempor varius. Suspendisse et neque vitae est porttitor",
                        "35",
                        "        malesuada sit amet consectetur quam. Nam vestibulum vestibulum ante sit amet bibendum. Integer vel porta massa,",
                        "36",
                        "        ac suscipit velit. In auctor ex eu tristique dignissim. Praesent vitae faucibus eros, vel ultricies lectus.",
                        "37",
                        "        Integer at turpis ut ex ultrices tristique. Mauris venenatis imperdiet dignissim. Quisque eleifend dui ac neque",
                        "38",
                        "        consectetur, in sollicitudin elit consequat. Sed suscipit mauris nec leo tristique, id lacinia purus aliquam.",
                        "39",
                        "      <\/p>",
                        "40",
                        "      <p>",
                        "41",
                        "        Duis nisl metus, pellentesque nec egestas nec, finibus eu erat. Morbi mollis, dui in rutrum blandit, tellus",
                        "42",
                        "        mauris vestibulum eros, ac gravida orci augue eget mauris. Maecenas pharetra convallis est placerat lacinia.",
                        "43",
                        "        Curabitur ipsum metus, sagittis vitae efficitur congue, suscipit quis nunc. Integer convallis, nisl sed mattis",
                        "44",
                        "        consectetur, mi nunc rutrum purus, at bibendum quam mi nec elit. Aliquam vulputate posuere ipsum, quis",
                        "45",
                        "        condimentum tortor ultricies vitae. Nunc vitae justo id neque dictum vulputate quis nec enim. Ut a venenatis",
                        "46",
                        "        metus.",
                        "47",
                        "      <\/p>",
                        "48",
                        "      <p>",
                        "49",
                        "        Etiam ut mattis ligula. Vestibulum a nisl vel magna fermentum sodales et ac metus. Ut cursus libero tincidunt",
                        "50",
                        "        nisl imperdiet, vel vulputate tellus pulvinar. Donec ac nulla tempus, aliquam tellus vitae, ornare velit. Nam",
                        "51",
                        "        quis massa ac elit scelerisque finibus eu ac metus. Nullam faucibus nunc id interdum tincidunt. Maecenas ut",
                        "52",
                        "        neque a justo ultricies pretium. Integer efficitur sit amet est in mattis. Vivamus interdum erat in quam sodales",
                        "53",
                        "        sagittis. Sed laoreet urna at neque volutpat rutrum. Duis id ornare lectus. Praesent in felis vitae tortor",
                        "54",
                        "        viverra congue. Pellentesque commodo diam eu lorem dapibus, ac scelerisque turpis tristique.",
                        "55",
                        "      <\/p>",
                        "56",
                        "      <p>",
                        "57",
                        "        <strong>",
                        "58",
                        "          You can move nodes with your mouse. Also, clicking the stage will create new nodes, connected to the closest",
                        "59",
                        "          nodes.",
                        "60",
                        "        <\/strong>",
                        "61",
                        "      <\/p>",
                        "62",
                        "      <div id=\"sigma-container\"><\/div>",
                        "63",
                        "      <p>",
                        "64",
                        "        Duis justo sapien, auctor a ligula eget, iaculis pharetra nulla. In sed malesuada arcu. Quisque viverra tortor",
                        "65",
                        "        sed imperdiet euismod. Aliquam quis sem vitae metus consequat posuere id ornare elit. Donec porttitor nulla id",
                        "66",
                        "        euismod luctus. In euismod a quam a convallis. Vivamus sit amet vehicula sapien, nec vulputate ex. Fusce non",
                        "67",
                        "        enim a felis luctus mattis ac nec nulla.",
                        "68",
                        "      <\/p>",
                        "69",
                        "      <p>",
                        "70",
                        "        Praesent tortor risus, sagittis at aliquet vel, egestas a ligula. Aliquam euismod lobortis magna, a varius massa",
                        "71",
                        "        tincidunt et. Praesent et ultrices turpis, sed rhoncus quam. Praesent quis congue tortor, sed ultrices mi.",
                        "72",
                        "        Curabitur tincidunt placerat tincidunt. Sed non varius risus. Proin suscipit magna arcu, a congue augue tempor",
                        "73",
                        "        vel. Sed hendrerit nisi a tellus luctus, eu venenatis orci semper. Vestibulum a nulla semper, elementum elit at,",
                        "74",
                        "        consequat nisl. Mauris ipsum mauris, ultrices nec ante et, elementum rhoncus diam. Mauris nisl arcu, maximus at",
                        "75",
                        "        ultricies at, convallis nec justo. Integer congue placerat sem, id ultrices odio porttitor consequat. Vestibulum",
                        "76",
                        "        porttitor tincidunt justo, vel sodales dui imperdiet ut. Mauris eget accumsan sapien, et viverra ante. Donec et",
                        "77",
                        "        turpis et neque euismod sollicitudin. Donec sit amet vulputate felis.",
                        "78",
                        "      <\/p>",
                        "79",
                        "    <\/main>"
                    ],
                    "delete": [
                        "11",
                        "      body,",
                        "12",
                        "      #sigma-container {",
                        "13",
                        "        width: 100%;",
                        "14",
                        "        height: 100%;",
                        "15",
                        "        margin: 0;",
                        "16",
                        "        padding: 0;",
                        "17",
                        "        overflow: hidden;",
                        "18",
                        "      }",
                        "19",
                        "      .text {",
                        "21",
                        "        font-style: italic;",
                        "22",
                        "        color: #666666;",
                        "23",
                        "        padding: 2em;",
                        "24",
                        "        position: absolute;",
                        "25",
                        "        inset: 0;",
                        "27",
                        "      .text p {",
                        "28",
                        "        margin-top: 0;",
                        "31",
                        "    <div class=\"text\">",
                        "32",
                        "      <p>You can move nodes with your mouse.<\/p>",
                        "33",
                        "      <p>Also, clicking the stage will create new nodes, connected to the closest nodes.<\/p>",
                        "34",
                        "    <\/div>",
                        "35",
                        "    <div id=\"sigma-container\"><\/div>"
                    ]
                }
            ]
        }
    },
    "15424148676fc4a40f64d7150b34d339a03dd743": {
        "changes": {
            "src\/core\/graph.js": "MODIFY"
        },
        "diff": {
            "src\/core\/graph.js": [
                {
                    "add": [
                        "441",
                        "    xMax += self.p.maxNodeSize;",
                        "442",
                        "    xMin -= self.p.maxNodeSize;",
                        "443",
                        "    yMax += self.p.maxNodeSize;",
                        "444",
                        "    yMin -= self.p.maxNodeSize;            ",
                        "445",
                        "",
                        "478",
                        "",
                        "479",
                        "        if(node['displayX'] < self.p.maxNodeSize) {",
                        "480",
                        "          node['displayX'] += self.p.maxNodeSize;",
                        "481",
                        "        } else if(node['displayX'] >= (w - self.p.maxNodeSize)) {",
                        "482",
                        "          node['displayX'] -= self.p.maxNodeSize;",
                        "483",
                        "        }",
                        "484",
                        "        if(node['displayY'] < self.p.maxNodeSize) {",
                        "485",
                        "          node['displayY'] += self.p.maxNodeSize;",
                        "486",
                        "        } else if(node['displayY'] >= (h - self.p.maxNodeSize)) {",
                        "487",
                        "          node['displayY'] -= self.p.maxNodeSize;",
                        "488",
                        "        }"
                    ],
                    "delete": []
                }
            ]
        }
    },
    "dc5c57060b74157558c3d894bb6275de898ccf0d": {
        "changes": {
            "src\/sigma.ts": "MODIFY",
            "src\/types.ts": "MODIFY"
        },
        "diff": {
            "src\/sigma.ts": [
                {
                    "add": [
                        "43",
                        "const { nodeExtent } = graphExtent;",
                        "74",
                        "  if (!data.zIndex) data.zIndex = 0;",
                        "75",
                        "",
                        "88",
                        "  if (!data.zIndex) data.zIndex = 0;",
                        "89",
                        "",
                        "117",
                        "  private nodeExtent: { x: Extent; y: Extent } = { x: [0, 1], y: [0, 1] };",
                        "534",
                        "    const nodeZExtent: [number, number] = [Infinity, -Infinity];",
                        "535",
                        "    const edgeZExtent: [number, number] = [Infinity, -Infinity];",
                        "550",
                        "    this.nodeExtent = nodeExtent(graph, nodeExtentProperties) as { x: Extent; y: Extent };",
                        "582",
                        "      if (this.settings.zIndex) {",
                        "583",
                        "        if (data.zIndex < nodeZExtent[0]) nodeZExtent[0] = data.zIndex;",
                        "584",
                        "        if (data.zIndex > nodeZExtent[1]) nodeZExtent[1] = data.zIndex;",
                        "585",
                        "      }",
                        "586",
                        "    }",
                        "587",
                        "",
                        "588",
                        "    \/\/ Handling node z-index",
                        "589",
                        "    \/\/ TODO: z-index needs us to compute display data before hand",
                        "590",
                        "    if (this.settings.zIndex && nodeZExtent[0] !== nodeZExtent[1])",
                        "591",
                        "      nodes = zIndexOrdering<NodeKey>(nodeZExtent, (node: NodeKey): number => this.nodeDataCache[node].zIndex, nodes);",
                        "592",
                        "",
                        "593",
                        "    for (let i = 0, l = nodes.length; i < l; i++) {",
                        "594",
                        "      const node = nodes[i];",
                        "595",
                        "      const data = this.nodeDataCache[node];",
                        "596",
                        "",
                        "641",
                        "      if (this.settings.zIndex) {",
                        "642",
                        "        if (data.zIndex < edgeZExtent[0]) edgeZExtent[0] = data.zIndex;",
                        "643",
                        "        if (data.zIndex > edgeZExtent[1]) edgeZExtent[1] = data.zIndex;",
                        "644",
                        "      }",
                        "645",
                        "    }",
                        "646",
                        "",
                        "647",
                        "    \/\/ Handling edge z-index",
                        "648",
                        "    if (this.settings.zIndex && edgeZExtent[0] !== edgeZExtent[1])",
                        "649",
                        "      edges = zIndexOrdering(edgeZExtent, (edge: EdgeKey): number => this.edgeDataCache[edge].zIndex, edges);",
                        "650",
                        "",
                        "651",
                        "    for (let i = 0, l = edges.length; i < l; i++) {",
                        "652",
                        "      const edge = edges[i];",
                        "653",
                        "      const data = this.edgeDataCache[edge];",
                        "654",
                        ""
                    ],
                    "delete": [
                        "43",
                        "const { nodeExtent, edgeExtent } = graphExtent;",
                        "113",
                        "  private nodeExtent: { x: Extent; y: Extent; z: Extent } = { x: [0, 1], y: [0, 1], z: [0, 1] };",
                        "114",
                        "  private edgeExtent: { z: Extent } | null = null;",
                        "545",
                        "    if (this.settings.zIndex) {",
                        "546",
                        "      nodeExtentProperties.push(\"z\");",
                        "547",
                        "      this.edgeExtent = edgeExtent(graph, [\"z\"]) as { z: Extent };",
                        "548",
                        "    }",
                        "549",
                        "",
                        "550",
                        "    this.nodeExtent = nodeExtent(graph, nodeExtentProperties) as { x: Extent; y: Extent; z: Extent };",
                        "561",
                        "    \/\/ Handling node z-index",
                        "562",
                        "    \/\/ TODO: z-index needs us to compute display data before hand",
                        "563",
                        "    if (this.settings.zIndex)",
                        "564",
                        "      nodes = zIndexOrdering<NodeKey>(",
                        "565",
                        "        this.nodeExtent.z,",
                        "566",
                        "        (node: NodeKey): number => graph.getNodeAttribute(node, \"z\"),",
                        "567",
                        "        nodes,",
                        "568",
                        "      );",
                        "569",
                        "",
                        "617",
                        "    \/\/ Handling edge z-index",
                        "618",
                        "    if (this.settings.zIndex && this.edgeExtent)",
                        "619",
                        "      edges = zIndexOrdering(this.edgeExtent.z, (edge: EdgeKey): number => graph.getEdgeAttribute(edge, \"z\"), edges);",
                        "620",
                        ""
                    ]
                }
            ],
            "src\/types.ts": [
                {
                    "add": [
                        "75",
                        "  zIndex: number;"
                    ],
                    "delete": [
                        "75",
                        "  zIndex?: number;"
                    ]
                }
            ]
        }
    },
    "0f3dbdf53322b57028ea0d0fe49a594ed83598e2": {
        "changes": {
            "src\/captors\/mouse.ts": "MODIFY"
        },
        "diff": {
            "src\/captors\/mouse.ts": [
                {
                    "add": [
                        "276",
                        "    ) {",
                        "278",
                        "    }",
                        "298",
                        "    this.currentWheelDirection = wheelDirection;",
                        "299",
                        "    this.lastWheelTriggerTime = now;",
                        "300",
                        ""
                    ],
                    "delete": [
                        "276",
                        "    )",
                        "278",
                        "",
                        "279",
                        "    this.currentWheelDirection = wheelDirection;",
                        "280",
                        "    this.lastWheelTriggerTime = now;"
                    ]
                }
            ]
        }
    },
    "6fbf53c6e26d304919bff0ef514ca5f94f27e092": {
        "changes": {
            "\/dev\/null": "DELETE",
            "examples\/build.js": "MODIFY"
        },
        "diff": {
            "\/dev\/null": [
                {
                    "add": [],
                    "delete": []
                }
            ],
            "examples\/build.js": [
                {
                    "add": [
                        "1",
                        "const fs = require(\"fs\");",
                        "2",
                        "const fsExtra = require(\"fs-extra\");",
                        "6",
                        "const { eachSeries } = require(\"async\");",
                        "16",
                        "fsExtra.mkdirSync(outputDir, { recursive: true });",
                        "25",
                        "  fsExtra.mkdirSync(outputSubFolder);",
                        "26",
                        "  fsExtra.mkdirSync(path.resolve(outputSubFolder, \"build\"));",
                        "27",
                        "  fsExtra.copyFileSync(path.resolve(inputSubFolder, \"index.html\"), path.resolve(outputSubFolder, \"index.html\"));",
                        "29",
                        "  if (fsExtra.existsSync(path.resolve(inputSubFolder, \"public\"))) {",
                        "30",
                        "    fsExtra.copySync(path.resolve(inputSubFolder, \"public\"), outputSubFolder);",
                        "45",
                        "\/\/ List all examples:",
                        "46",
                        "const notExamples = new Set([\"build\", \"node_modules\"]);",
                        "47",
                        "const examples = fs",
                        "48",
                        "  .readdirSync(\".\/\", { withFileTypes: true })",
                        "49",
                        "  .filter(",
                        "50",
                        "    (dirent) =>",
                        "51",
                        "      dirent.isDirectory() &&",
                        "52",
                        "      !notExamples.has(dirent.name) &&",
                        "53",
                        "      fs.existsSync(path.resolve(__dirname, dirent.name, \"index.ts\")),",
                        "54",
                        "  )",
                        "55",
                        "  .map((dirent) => dirent.name);",
                        "56",
                        "",
                        "59",
                        "  (name, next) => {",
                        "60",
                        "    buildExample(name, next);"
                    ],
                    "delete": [
                        "1",
                        "const fs = require(\"fs-extra\");",
                        "4",
                        "const { eachSeries } = require(\"async\");",
                        "15",
                        "fs.mkdirSync(outputDir, { recursive: true });",
                        "16",
                        "",
                        "17",
                        "const examples = require(\".\/examples.json\");",
                        "26",
                        "  fs.mkdirSync(outputSubFolder);",
                        "27",
                        "  fs.mkdirSync(path.resolve(outputSubFolder, \"build\"));",
                        "28",
                        "  fs.copyFileSync(path.resolve(inputSubFolder, \"index.html\"), path.resolve(outputSubFolder, \"index.html\"));",
                        "30",
                        "  if (fs.existsSync(path.resolve(inputSubFolder, \"public\"))) {",
                        "31",
                        "    fs.mkdirSync(path.resolve(outputSubFolder, \"public\"));",
                        "32",
                        "    fs.copySync(path.resolve(inputSubFolder, \"public\"), path.resolve(outputSubFolder, \"public\"));",
                        "49",
                        "  (example, next) => {",
                        "50",
                        "    buildExample(example.name, next);"
                    ]
                }
            ]
        }
    }
}