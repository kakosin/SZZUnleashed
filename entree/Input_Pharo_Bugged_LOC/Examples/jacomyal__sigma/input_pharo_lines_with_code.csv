fixer_commit_id,source_file,change_type,bug_intro_lines,bug_fix_lines
6cdaf9a9ffe77d6a51f4a6beb87b92dfae07b82b,src/core/quadtree.ts,MODIFY,"[499, '    const nodes: NodeKey[] = [];', 504, '    // If the point is out of the quadtree, return the full outside block:', 505, '    if (x < 0 || y < 0 || x > 1 || y > 1) return this.containers[OUTSIDE_BLOCK];', 506, '']","[499, '    const nodes: NodeKey[] = this.containers[OUTSIDE_BLOCK];']"
507e74ab1283756ceb548d626affcc15ba39ebc1,src/rendering/canvas/edge-label.ts,MODIFY,"[70, '  }', 72, '  if (label.length < 4) return;']","[71, '    if (label.length < 4) return;', 72, '  }']"
b39e13ab0003193ed5da6cd19bb86507bf20044c,src/captors/mouse.ts,MODIFY,"[195, '    setImmediate(() => (this.hasDragged = false));']","[195, '    setTimeout(() => (this.hasDragged = false), 0);']"
9e6ce2269844a8f35dbc66687319469997d82946,src/core/captors/mouse.ts,MODIFY,"[207, '    if (e.target !== this.container) return;', 209, '    this.emit(""mousemove"", mouseCoords);', 210, '', 212, '      // TODO: dispatch events']","[207, '    if (e.target === this.container) {', 208, '      this.emit(""mousemove"", mouseCoords);', 209, '    }', 211, '    // Handle the case when ""isMouseDown"" all the time, to allow dragging the', 212, '    // stage while the mouse is not hover the container:']"
ecd42ed94431e5e44540220e722fe8967d21fcfd,src/renderers/sigma.renderers.webgl.js,MODIFY,"[75, ""    this.initDOM('canvas', 'scene', true);"", 80, '    this.contexts.nodes = this.contexts.scene;', 81, '    this.contexts.edges = this.contexts.scene;', 82, '']","[75, ""    if (this.settings(options, 'batchEdgesDrawing')) {"", 76, ""      this.initDOM('canvas', 'edges', true);"", 77, ""      this.initDOM('canvas', 'nodes', true);"", 78, '    } else {', 79, ""      this.initDOM('canvas', 'scene', true);"", 80, '      this.contexts.nodes = this.contexts.scene;', 81, '      this.contexts.edges = this.contexts.scene;', 82, '    }', 83, '']"
7d25687b3316557ae9d3e079a1cf6cb795cf1d21,src/rendering/webgl/programs/node.image.ts,MODIFY,"[133, '      ctx.drawImage(image, xOffset, 0);']","[133, '      ctx.drawImage(image, xOffset, 0, image.width || 1, image.height || 1);']"
55f107ae7acb48bfcbcb25ae3781f628f3178d10,src/rendering/webgl/programs/node.image.ts,MODIFY,"[19, '  MAX_TEXTURE_SIZE = 100;', 89, '    const pendingImages: { image: HTMLImageElement; id: string; size: number }[] = [];', 105, '    const ctx = canvas.getContext(""2d"") as CanvasRenderingContext2D;', 107, '    canvas.width = pendingImages.reduce((iter, { size }) => iter + size, hasReceivedImages ? textureImage.width : 0);', 108, '    canvas.height = Math.max(hasReceivedImages ? textureImage.height : 0, ...pendingImages.map(({ size }) => size));', 110, '    let xOffset = 0;', 111, '    if (hasReceivedImages) {', 112, '      ctx.putImageData(textureImage, 0, 0);', 113, '      xOffset = textureImage.width;', 114, '    }', 115, '    pendingImages.forEach(({ id, image, size }) => {', 116, '      const imageSizeInTexture = Math.min(MAX_TEXTURE_SIZE, size);', 118, '      // Crop image, to only keep the biggest square, centered:', 119, '      let dx = 0,', 120, '        dy = 0;', 121, '      if ((image.width || 0) > (image.height || 0)) {', 122, '        dx = (image.width - image.height) / 2;', 123, '      } else {', 124, '        dy = (image.height - image.width) / 2;', 126, '      ctx.drawImage(image, dx, dy, size, size, xOffset, 0, imageSizeInTexture, imageSizeInTexture);', 128, '      // Update image state:', 129, '      images[id] = {', 130, '        status: ""ready"",', 131, '        x: xOffset,', 132, '        y: 0,', 133, '        width: imageSizeInTexture,', 134, '        height: imageSizeInTexture,', 135, '      };', 137, '      xOffset += imageSizeInTexture;', 140, '    textureImage = ctx.getImageData(0, 0, canvas.width, canvas.height);', 141, '    hasReceivedImages = true;']","[19, '  // maximum size of single texture in atlas', 20, '  MAX_TEXTURE_SIZE = 192,', 21, '  // maximum width of atlas texture (limited by browser)', 22, '  // low setting of 3072 works on phones & tablets', 23, '  MAX_CANVAS_WIDTH = 3072;', 60, '  // next write position in texture', 61, '  let writePositionX = 0;', 62, '  let writePositionY = 0;', 63, '  // height of current row', 64, '  let writeRowHeight = 0;', 65, '', 66, '  interface PendingImage {', 67, '    image: HTMLImageElement;', 68, '    id: string;', 69, '    size: number;', 70, '  }', 71, '', 105, '    const pendingImages: PendingImage[] = [];', 121, '    const ctx = canvas.getContext(""2d"", {willReadFrequently: true}) as CanvasRenderingContext2D;', 123, '    // limit canvas size to avoid browser and platform limits', 124, '    let totalWidth = hasReceivedImages ? textureImage.width : 0;', 125, '    let totalHeight = hasReceivedImages ? textureImage.height : 0;', 127, '    // initialize image drawing offsets with current write position', 128, '    let xOffset = writePositionX;', 129, '    let yOffset = writePositionY;', 131, '    /**', 132, '     * Draws a (full or partial) row of images into the atlas texture', 133, '     * @param pendingImages', 134, '     */', 135, '    const drawRow = (pendingImages: PendingImage[]) => {', 136, '      // update canvas size before drawing', 137, '      if (canvas.width !== totalWidth || canvas.height !== totalHeight) {', 138, '        canvas.width = Math.min(MAX_CANVAS_WIDTH, totalWidth);', 139, '        canvas.height = totalHeight;', 140, '', 141, '        // draw previous texture into resized canvas', 142, '        if (hasReceivedImages) {', 143, '          ctx.putImageData(textureImage, 0, 0);', 144, '        }', 147, '      pendingImages.forEach(({ id, image, size }) => {', 148, '        const imageSizeInTexture = Math.min(MAX_TEXTURE_SIZE, size);', 150, '        // Crop image, to only keep the biggest square, centered:', 151, '        let dx = 0,', 152, '          dy = 0;', 153, '        if ((image.width || 0) > (image.height || 0)) {', 154, '          dx = (image.width - image.height) / 2;', 155, '        } else {', 156, '          dy = (image.height - image.width) / 2;', 157, '        }', 158, '        ctx.drawImage(image, dx, dy, size, size, xOffset, yOffset, imageSizeInTexture, imageSizeInTexture);', 159, '', 160, '        // Update image state:', 161, '        images[id] = {', 162, '          status: ""ready"",', 163, '          x: xOffset,', 164, '          y: yOffset,', 165, '          width: imageSizeInTexture,', 166, '          height: imageSizeInTexture,', 167, '        };', 168, '', 169, '        xOffset += imageSizeInTexture;', 170, '      });', 171, '', 172, '      hasReceivedImages = true;', 173, '      textureImage = ctx.getImageData(0, 0, canvas.width, canvas.height);', 174, '    };', 175, '', 176, '    let rowImages: PendingImage[] = [];', 177, '    pendingImages.forEach((image) => {', 178, '      const { size } = image;', 179, '      const imageSizeInTexture = Math.min(size, MAX_TEXTURE_SIZE);', 180, '', 181, '      if (writePositionX + imageSizeInTexture > MAX_CANVAS_WIDTH) {', 182, '        // existing row is full: flush row and continue on next line', 183, '        if (rowImages.length > 0) {', 184, '          totalWidth = Math.max(writePositionX, totalWidth);', 185, '          totalHeight = Math.max(writePositionY + writeRowHeight, totalHeight);', 186, '          drawRow(rowImages);', 187, '', 188, '          rowImages = [];', 189, '          writeRowHeight = 0;', 190, '        }', 191, '', 192, '        writePositionX = 0;', 193, '        writePositionY = totalHeight;', 194, '        xOffset = 0;', 195, '        yOffset = totalHeight;', 196, '      }', 197, '', 198, '      // add image to row', 199, '      rowImages.push(image);', 200, '', 201, '      // advance write position and update maximum row height', 202, '      writePositionX += imageSizeInTexture;', 203, '      writeRowHeight = Math.max(writeRowHeight, imageSizeInTexture);', 206, '    // flush pending images in row - keep write position (and drawing cursor)', 207, '    totalWidth = Math.max(writePositionX, totalWidth);', 208, '    totalHeight = Math.max(writePositionY + writeRowHeight, totalHeight);', 209, '    drawRow(rowImages);', 210, '    rowImages = [];', 211, '']"
6fb5149b277b30e791b683b546fb7296bd9c0908,src/core/camera.ts,MODIFY,"[140, '    if (state.x) this.x = state.x;', 141, '    if (state.y) this.y = state.y;', 142, '    if (state.angle) this.angle = state.angle;', 143, '    if (state.ratio) this.ratio = state.ratio;']","[140, '    if (typeof state.x === ""number"") this.x = state.x;', 141, '    if (typeof state.y === ""number"") this.y = state.y;', 142, '    if (typeof state.angle === ""number"") this.angle = state.angle;', 143, '    if (typeof state.ratio === ""number"") this.ratio = state.ratio;']"
7bd4b61f4f892c3531582436cd3213a2a8ef6b52,src/middlewares/sigma.middlewares.rescale.js,MODIFY,"[99, ""      b = settings('maxNodeSize');"", 102, ""      b = settings('minNodeSize');"", 110, ""      d = settings('minEdgeSize');"", 113, ""      d = settings('minEdgeSize');""]","[99, ""      b = +settings('maxNodeSize');"", 102, ""      b = +settings('minNodeSize');"", 110, ""      d = +settings('minEdgeSize');"", 113, ""      d = +settings('minEdgeSize');""]"
6c82de2a97e73c12ef6ab0f5e9036a412cca57db,plugins/sigma.layout.forceAtlas2/sigma.layout.forceAtlas2.js,MODIFY,"[987, '      this.forceatlas2.setAutoSettings();']","[987, '', 988, '      if (this.forceatlas2.p.autoSettings)', 989, '        this.forceatlas2.setAutoSettings();', 990, '']"
b4df06e5ead72298ba790d035ec56d3e96d71927,website/index.html,MODIFY,"[273, '              <a href=""https://github.com/sim51/react-sigma-v2"">react-sigma-v2</a>. The example on top of this page is', 275, '              <a href=""https://github.com/jacomyal/sigma.js/tree/main/examples/website-showcase"">sourcecode</a> to get']","[273, '              <a href=""https://github.com/sim51/react-sigma"">@react-sigma</a>. The example on top of this page is', 275, '              <a href=""https://github.com/jacomyal/sigma.js/tree/main/demo"">sourcecode</a> to get']"
f2262f58c13cc4dce9e2dc2acf9e3cfaa3ddf6f1,src/utils/sigma.utils.js,MODIFY,"[244, '        self = this;', 246, '    target.addEventListener(type, function(e) {', 257, '    }, false);']","[244, '        self = this,', 245, '        handlers;', 247, '    target._doubleClickHandler = target._doubleClickHandler || {};', 248, '    target._doubleClickHandler[type] = target._doubleClickHandler[type] || [];', 249, '    handlers = target._doubleClickHandler[type];', 250, '', 251, '    handlers.push(function(e) {', 262, '    });', 263, '', 264, '    target.addEventListener(type, handlers[handlers.length - 1], false);', 265, '  };', 266, '', 267, '  /**', 268, '   * Unbind simulated ""double click"" events.', 269, '   *', 270, '   * @param  {HTMLElement} target   The event target.', 271, '   * @param  {string}      type     The event type.', 272, '   */', 273, '  sigma.utils.unbindDoubleClick = function(target, type) {', 274, '    var handler,', 275, '        handlers = (target._doubleClickHandler || {})[type] || [];', 276, '', 277, '    while ((handler = handlers.pop())) {', 278, '      target.removeEventListener(type, handler);', 279, '    }', 280, '', 281, '    delete (target._doubleClickHandler || {})[type];']"
f2262f58c13cc4dce9e2dc2acf9e3cfaa3ddf6f1,src/captors/sigma.captors.touch.js,MODIFY,"[61, ""    _target.addEventListener('touchstart', _handleStart);"", 62, ""    _target.addEventListener('touchend', _handleLeave);"", 63, ""    _target.addEventListener('touchcancel', _handleLeave);"", 64, ""    _target.addEventListener('touchleave', _handleLeave);"", 65, ""    _target.addEventListener('touchmove', _handleMove);""]","[61, ""    _target.addEventListener('touchstart', _handleStart, false);"", 62, ""    _target.addEventListener('touchend', _handleLeave, false);"", 63, ""    _target.addEventListener('touchcancel', _handleLeave, false);"", 64, ""    _target.addEventListener('touchleave', _handleLeave, false);"", 65, ""    _target.addEventListener('touchmove', _handleMove, false);"", 78, '', 79, '    /**', 80, '     * This method unbinds every handlers that makes the captor work.', 81, '     */', 82, '    this.kill = function() {', 83, ""      sigma.utils.unbindDoubleClick(_target, 'touchstart');"", 84, ""      _target.addEventListener('touchstart', _handleStart);"", 85, ""      _target.addEventListener('touchend', _handleLeave);"", 86, ""      _target.addEventListener('touchcancel', _handleLeave);"", 87, ""      _target.addEventListener('touchleave', _handleLeave);"", 88, ""      _target.addEventListener('touchmove', _handleMove);"", 89, '    };', 90, '', 91, '', 92, '', 93, '']"
f2262f58c13cc4dce9e2dc2acf9e3cfaa3ddf6f1,src/renderers/sigma.renderers.webgl.js,MODIFY,"[103, ""    window.addEventListener('resize', function() {"", 104, '      _self.resize();', 105, '    });']","[103, '    window.addEventListener(', 104, ""      'resize',"", 105, '      this.boundResize = this.resize.bind(this),', 106, '      false', 107, '    );', 571, '  /**', 572, '   * This method kills contexts and other attributes.', 573, '   */', 574, '  sigma.renderers.webgl.prototype.kill = function() {', 575, '    var k,', 576, '        captor;', 577, '', 578, '    // Unbind resize:', 579, ""    window.removeEventListener('resize', this.boundResize);"", 580, '', 581, '    // Kill captors:', 582, '    while ((captor = this.captors.pop()))', 583, '      captor.kill();', 584, '    delete this.captors;', 585, '', 586, '    // Kill contexts:', 587, '    for (k in this.domElements) {', 588, '      this.domElements[k].parentNode.removeChild(this.domElements[k]);', 589, '      delete this.domElements[k];', 590, '      delete this.contexts[k];', 591, '    }', 592, '    delete this.domElements;', 593, '    delete this.contexts;', 594, '  };', 595, '']"
f2262f58c13cc4dce9e2dc2acf9e3cfaa3ddf6f1,src/renderers/sigma.renderers.canvas.js,MODIFY,"[99, ""    window.addEventListener('resize', function() {"", 100, '      self.resize();', 101, '    });']","[99, '    window.addEventListener(', 100, ""      'resize',"", 101, '      this.boundResize = this.resize.bind(this),', 102, '      false', 103, '    );', 367, '  /**', 368, '   * This method kills contexts and other attributes.', 369, '   */', 370, '  sigma.renderers.canvas.prototype.kill = function() {', 371, '    var k,', 372, '        captor;', 373, '', 374, '    // Unbind resize:', 375, ""    window.removeEventListener('resize', this.boundResize);"", 376, '', 377, '    // Kill captors:', 378, '    while ((captor = this.captors.pop()))', 379, '      captor.kill();', 380, '    delete this.captors;', 381, '', 382, '    // Kill contexts:', 383, '    for (k in this.domElements) {', 384, '      this.domElements[k].parentNode.removeChild(this.domElements[k]);', 385, '      delete this.domElements[k];', 386, '      delete this.contexts[k];', 387, '    }', 388, '    delete this.domElements;', 389, '    delete this.contexts;', 390, '  };', 391, '']"
cfd9197f70319109db6b675dd7c82be493ca95a2,src/core/captors/mouse.ts,MODIFY,"[188, '    setTimeout(() => (this.draggedEvents = 0), 0);']","[188, '    setTimeout(() => {', 189, '      this.draggedEvents = 0;', 190, '      this.renderer.refresh();', 191, '    }, 0);']"
154408adf4d5df12df88b8d137609327c99fada8,src/core/captors/mouse.ts,MODIFY,"[150, '    this.startCameraState = this.renderer.getCamera().getState();', 152, '    const { x, y } = getPosition(e, this.container);', 153, '    this.lastMouseX = x;', 154, '    this.lastMouseY = y;', 156, '    this.draggedEvents = 0;', 158, '    this.downStartTime = Date.now();', 160, '    // TODO: dispatch events', 161, '    // Left button pressed', 162, '    this.isMouseDown = true;']","[150, '    // We only start dragging on left button', 151, '    if (e.button === 0) {', 152, '      this.startCameraState = this.renderer.getCamera().getState();', 154, '      const { x, y } = getPosition(e, this.container);', 155, '      this.lastMouseX = x;', 156, '      this.lastMouseY = y;', 158, '      this.draggedEvents = 0;', 160, '      this.downStartTime = Date.now();', 161, '      this.isMouseDown = true;', 162, '    }']"
3f4852deac199b73a64049ee6e43cf3046b79f49,plugins/sigma.parsers.gexf/sigma.parsers.gexf.js,MODIFY,"[42, '        obj.x = obj.viz.position.x;', 43, '        obj.y = obj.viz.position.y;', 44, '        obj.size = obj.viz.size;', 45, '        obj.color = obj.viz.color;']","[42, ""        if (obj.viz && typeof obj.viz === 'object') {"", 43, ""          if (obj.viz.position && typeof obj.viz.position === 'object') {"", 44, '            obj.x = obj.viz.position.x;', 45, '            obj.y = obj.viz.position.y;', 46, '          }', 47, '          obj.size = obj.viz.size;', 48, '          obj.color = obj.viz.color;', 49, '        }']"
2f6f7ebedab38be62b23f53d646acebf90829fba,src/sigma.ts,MODIFY,"[169, '  private nodeKeyToIndex: Record<string, number> = {};', 170, '  private edgeKeyToIndex: Record<string, number> = {};', 221, '    this.initializeCache();', 222, '', 359, '   * Method used to initialize display data cache.', 360, '   *', 361, '   * @return {Sigma}', 362, '   */', 363, '  private initializeCache(): void {', 364, '    const graph = this.graph;', 365, '', 366, '    // NOTE: the data caches are never reset to avoid paying a GC cost', 367, '    // But this could prove to be a bad decision. In which case just ""reset""', 368, '    // them here.', 369, '', 370, '    let i = 0;', 371, '', 372, '    graph.forEachNode((key) => {', 373, '      this.nodeKeyToIndex[key] = i++;', 374, '    });', 375, '', 376, '    i = 0;', 377, '', 378, '    graph.forEachEdge((key) => {', 379, '      this.edgeKeyToIndex[key] = i++;', 380, '    });', 381, '  }', 382, '', 383, '  /**', 569, '    this.activeListeners.addNodeGraphUpdate = (e: { key: string }): void => {', 570, '      // Adding entry to cache', 571, '      this.nodeKeyToIndex[e.key] = graph.order - 1;', 575, '    this.activeListeners.addEdgeGraphUpdate = (e: { key: string }): void => {', 576, '      // Adding entry to cache', 577, '      this.nodeKeyToIndex[e.key] = graph.order - 1;', 581, '    // TODO: clean cache on drop!', 583, '    // TODO: bind this on composed state events', 584, '    // TODO: it could be possible to update only specific node etc. by holding', 585, '    // a fixed-size pool of updated items', 586, '    graph.on(""nodeAdded"", this.activeListeners.addNodeGraphUpdate);', 587, '    graph.on(""nodeDropped"", this.activeListeners.graphUpdate);', 590, '    graph.on(""edgeAdded"", this.activeListeners.addEdgeGraphUpdate);', 591, '    graph.on(""edgeDropped"", this.activeListeners.graphUpdate);', 594, '    graph.on(""edgesCleared"", this.activeListeners.graphUpdate);', 595, '    graph.on(""cleared"", this.activeListeners.graphUpdate);', 795, '', 796, '      this.nodeKeyToIndex[node] = i;', 856, '', 857, '      this.nodeKeyToIndex[edge] = i;', 1709, '    graph.removeListener(""nodeAdded"", this.activeListeners.addNodeGraphUpdate);', 1713, '    graph.removeListener(""edgeAdded"", this.activeListeners.addEdgeGraphUpdate);', 1714, '    graph.removeListener(""edgeDropped"", this.activeListeners.graphUpdate);', 1717, '    graph.removeListener(""edgesCleared"", this.activeListeners.graphUpdate);', 1718, '    graph.removeListener(""cleared"", this.activeListeners.graphUpdate);']","[540, '    this.activeListeners.dropNodeGraphUpdate = (e: { key: string }): void => {', 541, '      delete this.nodeDataCache[e.key];', 542, '', 543, '      if (this.hoveredNode === e.key) this.hoveredNode = null;', 544, '', 548, '    this.activeListeners.dropEdgeGraphUpdate = (e: { key: string }): void => {', 549, '      delete this.edgeDataCache[e.key];', 550, '', 551, '      if (this.hoveredEdge === e.key) this.hoveredEdge = null;', 552, '', 556, '    this.activeListeners.clearEdgesGraphUpdate = (): void => {', 557, '      this.edgeDataCache = {};', 558, '      this.hoveredEdge = null;', 560, '      this.activeListeners.graphUpdate();', 561, '    };', 562, '', 563, '    this.activeListeners.clearGraphUpdate = (): void => {', 564, '      this.nodeDataCache = {};', 565, '      this.hoveredNode = null;', 566, '', 567, '      this.activeListeners.clearEdgesGraphUpdate();', 568, '    };', 569, '', 570, '    graph.on(""nodeAdded"", this.activeListeners.graphUpdate);', 571, '    graph.on(""nodeDropped"", this.activeListeners.dropNodeGraphUpdate);', 574, '    graph.on(""edgeAdded"", this.activeListeners.graphUpdate);', 575, '    graph.on(""edgeDropped"", this.activeListeners.dropEdgeGraphUpdate);', 578, '    graph.on(""edgesCleared"", this.activeListeners.clearEdgesGraphUpdate);', 579, '    graph.on(""cleared"", this.activeListeners.clearGraphUpdate);', 1689, '    graph.removeListener(""nodeAdded"", this.activeListeners.dropNodeGraphUpdate);', 1693, '    graph.removeListener(""edgeAdded"", this.activeListeners.graphUpdate);', 1694, '    graph.removeListener(""edgeDropped"", this.activeListeners.dropEdgeGraphUpdate);', 1697, '    graph.removeListener(""edgesCleared"", this.activeListeners.clearEdgesGraphUpdate);', 1698, '    graph.removeListener(""cleared"", this.activeListeners.clearGraphUpdate);']"
ced41eb65e11b098739ac596be056091e0bf0883,src/misc/sigma.misc.drawHovers.js,MODIFY,"[19, '      hoveredNodes = [];', 22, '      hoveredNodes.push(event.data.node);', 23, '      draw();', 27, '      var indexCheck = hoveredNodes.map(function(n) {', 28, '        return n;', 29, '      }).indexOf(event.data.node);', 30, '      hoveredNodes.splice(indexCheck, 1);', 43, '        renderers = sigma.canvas.hovers,', 44, '        embedSettings = self.settings.embedObjects({', 45, '          prefix: prefix', 46, '        });', 52, '        hoveredNodes.length', 54, '        if (! hoveredNodes[hoveredNodes.length - 1].hidden) {', 55, '          (', 56, '            renderers[hoveredNodes[hoveredNodes.length - 1].type] ||', 57, '            renderers.def', 58, '          )(', 59, '            hoveredNodes[hoveredNodes.length - 1],', 60, '            self.contexts.hover,', 61, '            embedSettings', 62, '          );', 63, '        }', 69, ""        !embedSettings('singleHover') &&"", 70, '        hoveredNodes.length', 72, '        for (var i = 0; i < hoveredNodes.length; i++) {', 73, '          if (! hoveredNodes[i].hidden) {', 74, '            (renderers[hoveredNodes[i].type] || renderers.def)(', 75, '              hoveredNodes[i],', 76, '              self.contexts.hover,', 77, '              embedSettings', 78, '            );', 79, '          }', 82, '', 83, '']","[19, '        hoveredNodes = {};', 22, '      var node = event.data.node;', 23, '      if (!node.hidden) {', 24, '        hoveredNodes[node.id] = node;', 25, '        draw();', 26, '      }', 30, '      delete hoveredNodes[event.data.node.id];', 43, '          hoveredNode,', 44, '          renderers = sigma.canvas.hovers,', 45, '          embedSettings = self.settings.embedObjects({', 46, '            prefix: prefix', 47, '          });', 53, '        Object.keys(hoveredNodes).length', 55, '        hoveredNode = hoveredNodes[Object.keys(hoveredNodes)[0]];', 56, '        (renderers[hoveredNode.type] || renderers.def)(', 57, '          hoveredNode,', 58, '          self.contexts.hover,', 59, '          embedSettings', 60, '        );', 66, ""        !embedSettings('singleHover')"", 68, '        for (k in hoveredNodes) {', 69, '          (renderers[hoveredNodes[k].type] || renderers.def)(', 70, '            hoveredNodes[k],', 71, '            self.contexts.hover,', 72, '            embedSettings', 73, '          );']"
4f99be7fb901b7ae453b28521307f76b8b53eed0,src/captors/sigma.captors.touch.js,MODIFY,"[81, '            y1;', 96, '            _startTouchX0 = sigma.utils.getX(_downTouches[0]);', 97, '            _startTouchY0 = sigma.utils.getY(_downTouches[0]);', 104, '            x0 = sigma.utils.getX(_downTouches[0]);', 105, '            y0 = sigma.utils.getY(_downTouches[0]);', 106, '            x1 = sigma.utils.getX(_downTouches[1]);', 107, '            y1 = sigma.utils.getY(_downTouches[1]);', 233, '            x0 = sigma.utils.getX(_downTouches[0]);', 234, '            y0 = sigma.utils.getY(_downTouches[0]);', 258, '            x0 = sigma.utils.getX(_downTouches[0]);', 259, '            y0 = sigma.utils.getY(_downTouches[0]);', 260, '            x1 = sigma.utils.getX(_downTouches[1]);', 261, '            y1 = sigma.utils.getY(_downTouches[1]);']","[65, '    function position(e) {', 66, '      var offset = sigma.utils.getOffset(_target);', 67, '', 68, '      return {', 69, '        x: e.pageX - offset.left,', 70, '        y: e.pageY - offset.top', 71, '      };', 72, '    }', 89, '            y1,', 90, '            pos0,', 91, '            pos1;', 106, '            pos0 = position(_downTouches[0]);', 107, '            _startTouchX0 = pos0.x;', 108, '            _startTouchY0 = pos0.y;', 115, '            pos0 = position(_downTouches[0]);', 116, '            pos1 = position(_downTouches[1]);', 117, '            x0 = pos0.x;', 118, '            y0 = pos0.y;', 119, '            x1 = pos1.x;', 120, '            y1 = pos1.y;', 225, '            pos0,', 226, '            pos1,', 248, '            pos0 = position(_downTouches[0]);', 249, '            x0 = pos0.x;', 250, '            y0 = pos0.y;', 274, '            pos0 = position(_downTouches[0]);', 275, '            pos1 = position(_downTouches[1]);', 276, '            x0 = pos0.x;', 277, '            y0 = pos0.y;', 278, '            x1 = pos1.x;', 279, '            y1 = pos1.y;']"
08a6b24aa0cf527f52ea38040fed0d46fb1ad484,examples/mouse-manipulations/index.ts,MODIFY,"[50, 'renderer.getMouseCaptor().on(""mousemove"", (e) => {']","[50, 'renderer.getMouseCaptor().on(""mousemovebody"", (e) => {']"
08a6b24aa0cf527f52ea38040fed0d46fb1ad484,src/core/captors/mouse.ts,MODIFY,"[202, '    this.emit(""mousemove"", getMouseCoords(e, this.container));']","[202, '', 203, '    const mouseCoords = getMouseCoords(e, this.container);', 204, '', 205, '    // Always trigger a ""mousemovebody"" event, so that it is possible to develop', 206, '    // a drag-and-drop effect that works even when the mouse is out of the', 207, '    // container:', 208, '    this.emit(""mousemovebody"", mouseCoords);', 209, '', 210, '    // Only trigger the ""mousemove"" event when the mouse is actually hovering', 211, '    // the container, to avoid weirdly hovering nodes and/or edges when the', 212, '    // mouse is not hover the container:', 213, '    if (e.target !== this.container) return;', 214, '', 215, '    this.emit(""mousemove"", mouseCoords);']"
2531ff61a068e87734a7eb60935296e2cca64fea,src/sigma.ts,MODIFY,"[471, '          return this.scheduleHighlightedNodesRender();', 1131, '    // 4. Render:', 1489, '    this.webGLContexts.hoverNodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT);']","[471, '          this.scheduleHighlightedNodesRender();', 472, '          return;', 1132, '    // 4. Clear hovered nodes layer:', 1133, '    this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT);', 1134, '    // 5. Render:', 1492, '    this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT);']"
6f20727f381f5657debc3322eaab55418ea959a0,src/rendering/webgl/programs/common/node.ts,MODIFY,"[118, '      this.programs.forEach((program) => program.render(params));']","[118, '      this.programs.forEach((program) => {', 119, '        program.bind();', 120, '        program.bufferData();', 121, '        program.render(params);', 122, '      });']"
04743f9e10cb4216de8f6d05cd8aa197102a1f29,src/core/camera.ts,MODIFY,"[331, '  animatedZoom(factorOrOptions: number | (Partial<AnimateOptions> & { factor: number })): void {', 351, '  animatedUnzoom(factorOrOptions: number | (Partial<AnimateOptions> & { factor: number })): void {', 371, '  animatedReset(options: Partial<AnimateOptions>): void {']","[331, '  animatedZoom(factorOrOptions?: number | (Partial<AnimateOptions> & { factor: number })): void {', 351, '  animatedUnzoom(factorOrOptions?: number | (Partial<AnimateOptions> & { factor: number })): void {', 371, '  animatedReset(options?: Partial<AnimateOptions>): void {']"
651e9811104d0193f4b741e2ccea8e574eb6475d,src/sigma.ts,MODIFY,"[738, '      if (data.label && !data.hidden)']","[738, '      if (typeof data.label === ""string"" && !data.hidden)']"
04addb9ded2793dcda4401fb2ea5e3f7199cbaf3,src/rendering/webgl/shaders/node.vert.glsl,MODIFY,"[28, '  v_border = u_sqrtZoomRatio * u_sqrtZoomRatio / a_size / 50.0;']","[28, '  v_border = u_correctionRatio * u_sqrtZoomRatio * u_sqrtZoomRatio;']"
bddca2888ddb5410da063c38162198bcd604af0c,src/sigma.ts,MODIFY,"[610, '            (edgeAttributes.size * transformationRatio) / this.cameraSizeRatio,']","[610, '            (edgeDataCache[key].size * transformationRatio) / this.cameraSizeRatio,']"
4baea75f6cd7045a7e9eacd9ebb0c0b4094b78f7,src/sigma.ts,MODIFY,"[442, '          this.event.preventSigmaDefault();', 492, '            this.event.preventSigmaDefault();']","[442, '          e.preventSigmaDefault();', 492, '            e.preventSigmaDefault();']"
4baea75f6cd7045a7e9eacd9ebb0c0b4094b78f7,src/core/captors/captor.ts,MODIFY,"[41, '  return {', 45, '      this.sigmaDefaultPrevented = true;']","[41, '  const res: MouseCoords = {', 45, '      res.sigmaDefaultPrevented = true;', 49, '', 50, '  return res;']"
50ccb8bd6876f117ccca0368d5abe33093a88c80,src/sigma.ts,MODIFY,"[43, 'import TouchCaptor from ""./core/captors/touch"";', 385, '    // Function checking if the mouse is on the given node', 386, '    const mouseIsOnNode = (mouseX: number, mouseY: number, nodeX: number, nodeY: number, size: number): boolean => {', 387, '      return (', 388, '        mouseX > nodeX - size &&', 389, '        mouseX < nodeX + size &&', 390, '        mouseY > nodeY - size &&', 391, '        mouseY < nodeY + size &&', 392, '        Math.sqrt(Math.pow(mouseX - nodeX, 2) + Math.pow(mouseY - nodeY, 2)) < size', 393, '      );', 394, '    };', 395, '', 396, ""    // Function returning the nodes in the mouse's quad"", 397, '    const getQuadNodes = (mouseX: number, mouseY: number) => {', 398, '      const mouseGraphPosition = this.viewportToFramedGraph({ x: mouseX, y: mouseY });', 399, '', 400, '      // TODO: minus 1? lol', 401, '      return this.quadtree.point(mouseGraphPosition.x, 1 - mouseGraphPosition.y);', 402, '    };', 403, '', 406, ""      // NOTE: for the canvas renderer, testing the pixel's alpha should"", 407, '      // give some boost but this slows things down for WebGL empirically.', 408, '', 409, '      const quadNodes = getQuadNodes(e.x, e.y);', 410, '', 418, '      // We will hover the node whose center is closest to mouse', 419, '      let minDistance = Infinity,', 420, '        nodeToHover = null;', 421, '', 422, '      for (let i = 0, l = quadNodes.length; i < l; i++) {', 423, '        const node = quadNodes[i];', 424, '', 425, '        const data = this.nodeDataCache[node];', 426, '', 427, '        const pos = this.framedGraphToViewport(data);', 428, '', 429, '        const size = this.scaleSize(data.size);', 430, '', 431, '        if (!data.hidden && mouseIsOnNode(e.x, e.y, pos.x, pos.y, size)) {', 432, '          const distance = Math.sqrt(Math.pow(e.x - pos.x, 2) + Math.pow(e.y - pos.y, 2));', 433, '', 434, '          // TODO: sort by min size also for cases where center is the same', 435, '          if (distance < minDistance) {', 436, '            minDistance = distance;', 437, '            nodeToHover = node;', 438, '          }', 439, '        }', 440, '      }', 460, '        if (!mouseIsOnNode(e.x, e.y, pos.x, pos.y, size)) {', 490, '        if (this.hoveredNode)', 493, '            node: this.hoveredNode,']","[43, 'import TouchCaptor, { FakeSigmaMouseEvent } from ""./core/captors/touch"";', 372, '   * Method that checks whether or not a node collides with a given position.', 373, '   */', 374, '  private mouseIsOnNode({ x, y }: Coordinates, { x: nodeX, y: nodeY }: Coordinates, size: number): boolean {', 375, '    return (', 376, '      x > nodeX - size &&', 377, '      x < nodeX + size &&', 378, '      y > nodeY - size &&', 379, '      y < nodeY + size &&', 380, '      Math.sqrt(Math.pow(x - nodeX, 2) + Math.pow(y - nodeY, 2)) < size', 381, '    );', 382, '  }', 383, '', 384, '  /**', 385, '   * Method that returns all nodes in quad at a given position.', 386, '   */', 387, '  private getQuadNodes(position: Coordinates): string[] {', 388, '    const mouseGraphPosition = this.viewportToFramedGraph(position);', 389, '', 390, '    return this.quadtree.point(mouseGraphPosition.x, 1 - mouseGraphPosition.y);', 391, '  }', 392, '', 393, '  /**', 394, '   * Method that returns the closest node to a given position.', 395, '   */', 396, '  private getNodeAtPosition(position: Coordinates): string | null {', 397, '    const { x, y } = position;', 398, '    const quadNodes = this.getQuadNodes(position);', 399, '', 400, '    // We will hover the node whose center is closest to mouse', 401, '    let minDistance = Infinity,', 402, '      nodeAtPosition = null;', 403, '', 404, '    for (let i = 0, l = quadNodes.length; i < l; i++) {', 405, '      const node = quadNodes[i];', 406, '', 407, '      const data = this.nodeDataCache[node];', 408, '', 409, '      const nodePosition = this.framedGraphToViewport(data);', 410, '', 411, '      const size = this.scaleSize(data.size);', 412, '', 413, '      if (!data.hidden && this.mouseIsOnNode(position, nodePosition, size)) {', 414, '        const distance = Math.sqrt(Math.pow(x - nodePosition.x, 2) + Math.pow(y - nodePosition.y, 2));', 415, '', 416, '        // TODO: sort by min size also for cases where center is the same', 417, '        if (distance < minDistance) {', 418, '          minDistance = distance;', 419, '          nodeAtPosition = node;', 420, '        }', 421, '      }', 422, '    }', 423, '', 424, '    return nodeAtPosition;', 425, '  }', 426, '', 427, '  /**', 450, '      const nodeToHover = this.getNodeAtPosition(e);', 470, '        if (!this.mouseIsOnNode(e, pos, size)) {', 500, '        const isFakeSigmaMouseEvent = (e.original as FakeSigmaMouseEvent).isFakeSigmaMouseEvent;', 501, '        const nodeAtPosition = isFakeSigmaMouseEvent ? this.getNodeAtPosition(e) : this.hoveredNode;', 502, '', 503, '        if (nodeAtPosition)', 506, '            node: nodeAtPosition,']"
0c30563af11bf6a63eeaa44af3d442c5137778a7,src/sigma.ts,MODIFY,"[692, '    for (const type in nodesPerPrograms) {', 697, '      if (!keepArrays) this.nodePrograms[type].allocate(nodesPerPrograms[type]);', 755, '    for (const type in edgesPerPrograms) {', 760, '      if (!keepArrays) this.edgePrograms[type].allocate(edgesPerPrograms[type]);']","[692, '    for (const type in this.nodePrograms) {', 697, '      if (!keepArrays) this.nodePrograms[type].allocate(nodesPerPrograms[type] || 0);', 755, '    for (const type in this.edgePrograms) {', 760, '      if (!keepArrays) this.edgePrograms[type].allocate(edgesPerPrograms[type] || 0);']"
624859a467578a2cd21e265096c589665dd788be,src/core/camera.ts,MODIFY,"[225, '      if (validState.x) newState.x = initialState.x + (validState.x - initialState.x) * coefficient;', 226, '      if (validState.y) newState.y = initialState.y + (validState.y - initialState.y) * coefficient;', 227, '      if (validState.angle) newState.angle = initialState.angle + (validState.angle - initialState.angle) * coefficient;', 228, '      if (validState.ratio) newState.ratio = initialState.ratio + (validState.ratio - initialState.ratio) * coefficient;']","[225, '      if (typeof validState.x === ""number"") newState.x = initialState.x + (validState.x - initialState.x) * coefficient;', 226, '      if (typeof validState.y === ""number"") newState.y = initialState.y + (validState.y - initialState.y) * coefficient;', 227, '      if (typeof validState.angle === ""number"")', 228, '        newState.angle = initialState.angle + (validState.angle - initialState.angle) * coefficient;', 229, '      if (typeof validState.ratio === ""number"")', 230, '        newState.ratio = initialState.ratio + (validState.ratio - initialState.ratio) * coefficient;']"
2295f5f876bc51bf4322a25b3857bf7400c9689c,src/rendering/webgl/shaders/node.image.frag.glsl,MODIFY,"[12, '  vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);']","[10, 'const vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);']"
2295f5f876bc51bf4322a25b3857bf7400c9689c,src/rendering/webgl/shaders/edge.frag.glsl,MODIFY,"[10, '', 21, '}']","[20, '}']"
2295f5f876bc51bf4322a25b3857bf7400c9689c,src/rendering/webgl/shaders/node.fast.frag.glsl,MODIFY,"[9, '  vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);', 19, '  gl_FragColor = mix(color0, v_color, t);']","[7, 'const vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);', 19, '  gl_FragColor = mix(transparent, v_color, t);']"
c7cd9520bcc41da5a44ff917e6acd2316a9c53c5,plugins/sigma.layout.forceAtlas2/supervisor.js,MODIFY,"[228, '  var supervisor = null;', 229, '', 233, '    if (!supervisor)', 234, '      supervisor = new Supervisor(this);', 238, '      supervisor.configure(config);', 241, '    supervisor.start();', 247, '    if (!supervisor)', 251, '    supervisor.stop();', 257, '    if (!supervisor)', 261, '    supervisor.stop();', 264, '    supervisor.killWorker();', 267, '    supervisor = null;', 273, '    if (!supervisor)', 274, '      supervisor = new Supervisor(this);', 276, '    supervisor.configure(config);', 282, '    return supervisor && supervisor.running;']","[231, '    if (!this.supervisor)', 232, '      this.supervisor = new Supervisor(this);', 236, '      this.supervisor.configure(config);', 239, '    this.supervisor.start();', 245, '    if (!this.supervisor)', 249, '    this.supervisor.stop();', 255, '    if (!this.supervisor)', 259, '    this.supervisor.stop();', 262, '    this.supervisor.killWorker();', 265, '    this.supervisor = null;', 271, '    if (!this.supervisor)', 272, '      this.supervisor = new Supervisor(this);', 274, '    this.supervisor.configure(config);', 280, '    return this.supervisor && this.supervisor.running;']"
f44fdba63a5f88826aee796674795c3d3e662061,src/sigma.ts,MODIFY,"[952, '    // Finding visible nodes to display their labels', 953, '    let visibleNodes: Set<string>;', 954, '', 955, '    if (cameraState.ratio >= 1) {', 956, '      // Camera is unzoomed so no need to ask the quadtree for visible nodes', 957, '      visibleNodes = new Set(this.graph.nodes());', 958, '    } else {', 959, ""      // Let's ask the quadtree"", 960, '      const viewRectangle = this.viewRectangle();', 961, '', 962, '      visibleNodes = new Set(', 963, '        this.quadtree.rectangle(', 964, '          viewRectangle.x1,', 965, '          1 - viewRectangle.y1,', 966, '          viewRectangle.x2,', 967, '          1 - viewRectangle.y2,', 968, '          viewRectangle.height,', 969, '        ),', 970, '      );', 971, '    }', 972, '', 974, '    // TODO: drop gridsettings likewise', 975, '    // TODO: optimize through visible nodes', 976, '    const labelsToDisplay = this.labelGrid', 977, '      .getLabelsToDisplay(cameraState.ratio, this.settings.labelDensity)', 978, '      .concat(this.nodesWithForcedLabels);', 997, ""      // TODO: we can cache the labels we need to render until the camera's ratio changes"", 998, '      // TODO: this should be computed in the canvas components?', 1003, '      if (!visibleNodes.has(node)) continue;', 1005, '      // TODO:']","[7, 'import extend from ""@yomguithereal/helpers/extend"";', 48, ' * Constants.', 49, ' */', 50, 'const X_LABEL_MARGIN = 150;', 51, 'const Y_LABEL_MARGIN = 50;', 52, '', 53, '/**', 960, '    const labelsToDisplay = this.labelGrid.getLabelsToDisplay(cameraState.ratio, this.settings.labelDensity);', 961, '    extend(labelsToDisplay, this.nodesWithForcedLabels);', 962, '', 974, '      // NOTE: we can do better probably', 982, ""      // NOTE: we can cache the labels we need to render until the camera's ratio changes"", 985, '      // Is node big enough?', 988, '      // Is node actually on screen (with some margin)', 989, '      // NOTE: we used to rely on the quadtree for this, but the coordinates', 990, '      // conversion make it unreliable and at that point we already converted', 991, '      // to viewport coordinates and since the label grid already culls the', 992, '      // number of potential labels to display this looks like a good', 993, '      // performance compromise.', 994, '      // NOTE: labelGrid.getLabelsToDisplay could probably optimize by not', 995, '      // considering cells obviously outside of the range of the current', 996, '      // view rectangle.', 997, '      if (', 998, '        x < -X_LABEL_MARGIN ||', 999, '        x > this.width + X_LABEL_MARGIN ||', 1000, '        y < -Y_LABEL_MARGIN ||', 1001, '        y > this.height + Y_LABEL_MARGIN', 1002, '      )', 1003, '        continue;']"
1559baabdecdcbe721f954d14e463f352f934b8b,src/sigma.ts,MODIFY,"[188, '    let gl = this.webGLContexts.nodes;', 190, '    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);', 191, '    gl.enable(gl.BLEND);', 192, '', 193, '    gl = this.webGLContexts.edges;', 194, '', 195, '    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);', 196, '    gl.enable(gl.BLEND);']","[188, '    for (const key in this.webGLContexts) {', 189, '      const gl = this.webGLContexts[key];', 191, '      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);', 192, '      gl.enable(gl.BLEND);', 193, '    }']"
7a1e123ded68521ce0b79756c7dbef13255f003d,src/rendering/webgl/programs/node.ts,MODIFY,"[19, 'const POINTS = 3,', 20, '  ATTRIBUTES = 5;', 22, 'const ANGLE_1 = 0,', 23, '  ANGLE_2 = (2 * Math.PI) / 3,', 24, '  ANGLE_3 = (4 * Math.PI) / 3;', 101, '      array[i++] = 0;', 102, '      array[i++] = 0;', 103, '      array[i++] = 0;', 104, '      array[i++] = 0;', 105, '      array[i++] = 0;']","[19, 'const POINTS = 3;', 20, 'const ATTRIBUTES = 5;', 22, 'const ANGLE_1 = 0;', 23, 'const ANGLE_2 = (2 * Math.PI) / 3;', 24, 'const ANGLE_3 = (4 * Math.PI) / 3;', 101, '      for (let l = i + POINTS * ATTRIBUTES; i < l; i++) array[i] = 0;']"
bd667b2e0d3c9d633eb77178c997667f67e2343e,src/utils/index.ts,MODIFY,"[169, '  let ratio = Math.max(maxX - minX, maxY - minY);', 170, '', 171, '  if (ratio === 0) ratio = 1;', 172, '', 173, '  const dX = (maxX + minX) / 2,']","[133, '  if (!graph.order) return { x: [0, 1], y: [0, 1] };', 134, '', 171, '  let ratio = Math.max(maxX - minX, maxY - minY),', 172, '    dX = (maxX + minX) / 2,', 175, '  if (ratio === 0 || Math.abs(ratio) === Infinity || isNaN(ratio)) ratio = 1;', 176, '  if (isNaN(dX)) dX = 0;', 177, '  if (isNaN(dY)) dY = 0;', 178, '']"
bd667b2e0d3c9d633eb77178c997667f67e2343e,src/sigma.ts,MODIFY,"[173, '    x: [-Infinity, Infinity],', 174, '    y: [-Infinity, Infinity],', 1622, '    return multiplyVec2(invMatrix, {']","[173, '    x: [0, 1],', 174, '    y: [0, 1],', 1622, '    const res = multiplyVec2(invMatrix, {', 1626, '', 1627, '    if (isNaN(res.x)) res.x = 0;', 1628, '    if (isNaN(res.y)) res.y = 0;', 1629, '', 1630, '    return res;']"
984eb8c316c1b935e8eda1adfad36fe9ba4c3652,src/core/quadtree.ts,MODIFY,"[552, '    this.cache.push(...this.containers[OUTSIDE_BLOCK]);']","[552, '    extend(this.cache, this.containers[OUTSIDE_BLOCK]);']"
8036d6041be2e18cc32041b30c662537b54f6cb5,src/core/captors/touch.ts,MODIFY,"[65, '    const mousePosition = position || getPosition(e.touches[0]);', 99, '    this.emit(""touchdown"", getTouchCoords(e));', 153, '    this.emit(""touchup"", getTouchCoords(e));', 243, '    this.emit(""touchmove"", getTouchCoords(e));']","[65, '    const mousePosition = position || getPosition(e.touches[0], this.container);', 99, '    this.emit(""touchdown"", getTouchCoords(e, this.container));', 153, '    this.emit(""touchup"", getTouchCoords(e, this.container));', 243, '    this.emit(""touchmove"", getTouchCoords(e, this.container));']"
8036d6041be2e18cc32041b30c662537b54f6cb5,src/core/captors/captor.ts,MODIFY,"[16, ' * Extract the local X position from a mouse event or touch object.', 17, ' *', 18, ' * @param  {event}  e - A mouse event or touch object.', 19, ' * @return {number}     The local X value of the mouse.', 20, ' */', 21, 'export function getX(e: MouseEvent | Touch): number {', 22, '  if (typeof (e as MouseEvent).offsetX !== ""undefined"") return (e as MouseEvent).offsetX;', 23, '', 24, '  if (typeof e.clientX !== ""undefined"") return e.clientX;', 25, '', 26, '  throw new Error(""Captor: could not extract x from event."");', 27, '}', 28, '', 29, '/**', 30, ' * Extract the local Y position from a mouse event or touch object.', 31, ' *', 32, ' * @param  {event}  e - A mouse event or touch object.', 33, ' * @return {number}     The local Y value of the mouse.', 34, ' */', 35, 'export function getY(e: MouseEvent | Touch): number {', 36, '  if (typeof (e as MouseEvent).offsetY !== ""undefined"") return (e as MouseEvent).offsetY;', 37, '', 38, '  if (typeof e.clientY !== ""undefined"") return e.clientY;', 39, '', 40, '  throw new Error(""Captor: could not extract y from event."");', 41, '}', 42, '', 43, '/**', 49, ' * @param  {event}        e - A mouse event or touch object.', 50, ' * @param  {HTMLElement?} dom - A DOM element to compute offset relatively to.', 51, ' * @return {number}       The local Y value of the mouse.', 53, 'export function getPosition(e: MouseEvent | Touch, dom?: HTMLElement): Coordinates {', 54, '  if (!dom) {', 55, '    return {', 56, '      x: getX(e),', 57, '      y: getY(e),', 58, '    };', 59, '  }', 60, '', 63, '    x: e.pageX - bbox.left,', 64, '    y: e.pageY - bbox.top,', 71, ' * @param  {event}  e - A mouse event or touch object.', 74, 'export function getMouseCoords(e: MouseEvent): MouseCoords {', 76, '    x: getX(e),', 77, '    y: getY(e),', 95, ' * @param  {event}  e - A wheel mouse event.', 98, 'export function getWheelCoords(e: WheelEvent): WheelCoords {', 100, '    ...getMouseCoords(e),', 116, 'export function getTouchCoords(e: TouchEvent, dom?: HTMLElement): TouchCoords {']","[21, ' * @param  {event}       e - A mouse event or touch object.', 22, ' * @param  {HTMLElement} dom - A DOM element to compute offset relatively to.', 23, ' * @return {number}      The local Y value of the mouse.', 25, 'export function getPosition(e: MouseEvent | Touch, dom: HTMLElement): Coordinates {', 27, '', 29, '    x: e.clientX - bbox.left,', 30, '    y: e.clientY - bbox.top,', 37, ' * @param  {event}       e   - A mouse event or touch object.', 38, ' * @param  {HTMLElement} dom - A DOM element to compute offset relatively to.', 41, 'export function getMouseCoords(e: MouseEvent, dom: HTMLElement): MouseCoords {', 43, '    ...getPosition(e, dom),', 61, ' * @param  {event}       e   - A wheel mouse event.', 62, ' * @param  {HTMLElement} dom - A DOM element to compute offset relatively to.', 65, 'export function getWheelCoords(e: WheelEvent, dom: HTMLElement): WheelCoords {', 67, '    ...getMouseCoords(e, dom),', 82, ' *', 83, ' * @param  {event}       e   - A touch event.', 84, ' * @param  {HTMLElement} dom - A DOM element to compute offset relatively to.', 85, ' * @return {object}', 87, 'export function getTouchCoords(e: TouchEvent, dom: HTMLElement): TouchCoords {']"
8036d6041be2e18cc32041b30c662537b54f6cb5,src/core/captors/mouse.ts,MODIFY,"[103, '    if (this.draggedEvents < DRAGGED_EVENTS_TOLERANCE) this.emit(""click"", getMouseCoords(e));', 109, '    this.emit(""rightClick"", getMouseCoords(e));', 119, '    const mouseCoords = getMouseCoords(e);', 154, '        this.emit(""mousedown"", getMouseCoords(e));', 197, '    this.emit(""mouseup"", getMouseCoords(e));', 202, '    this.emit(""mousemove"", getMouseCoords(e));', 262, '    const wheelCoords = getWheelCoords(e);']","[103, '    if (this.draggedEvents < DRAGGED_EVENTS_TOLERANCE) this.emit(""click"", getMouseCoords(e, this.container));', 109, '    this.emit(""rightClick"", getMouseCoords(e, this.container));', 119, '    const mouseCoords = getMouseCoords(e, this.container);', 154, '        this.emit(""mousedown"", getMouseCoords(e, this.container));', 197, '    this.emit(""mouseup"", getMouseCoords(e, this.container));', 202, '    this.emit(""mousemove"", getMouseCoords(e, this.container));', 262, '    const wheelCoords = getWheelCoords(e, this.container);']"
8036d6041be2e18cc32041b30c662537b54f6cb5,examples/mouse-manipulations/index.html,MODIFY,"[12, '      body,', 13, '      #sigma-container {', 14, '        width: 100%;', 15, '        height: 100%;', 16, '        margin: 0;', 17, '        padding: 0;', 18, '        overflow: hidden;', 19, '      }', 20, '      .text {', 22, '        font-style: italic;', 23, '        color: #666666;', 24, '        padding: 2em;', 25, '        position: absolute;', 26, '        inset: 0;', 28, '      .text p {', 29, '        margin-top: 0;', 32, '    <div class=""text"">', 33, '      <p>You can move nodes with your mouse.</p>', 34, '      <p>Also, clicking the stage will create new nodes, connected to the closest nodes.</p>', 35, '    </div>', 36, '    <div id=""sigma-container""></div>']","[12, '      body {', 14, '        background: #f9f9f9;', 16, '      main {', 17, '        margin: auto;', 18, '        max-width: 800px;', 19, '      }', 20, '      #sigma-container {', 21, '        height: 600px;', 22, '        background: white;', 25, '    <main>', 26, '      <p>', 27, '        <strong>', 28, '          To be able to test the integration of sigma and its mouse interaction capabilities in a scrollable webpage, we', 29, '          added some random texts around the container.', 30, '        </strong>', 31, '      </p>', 32, '      <p>', 33, '        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla a justo vel velit efficitur ullamcorper non ut', 34, '        augue. Nunc ultrices massa nulla, non rutrum justo accumsan eget. Aenean volutpat pharetra dolor, in mollis', 35, '        felis consectetur faucibus. Vestibulum varius ligula et tempor varius. Suspendisse et neque vitae est porttitor', 36, '        malesuada sit amet consectetur quam. Nam vestibulum vestibulum ante sit amet bibendum. Integer vel porta massa,', 37, '        ac suscipit velit. In auctor ex eu tristique dignissim. Praesent vitae faucibus eros, vel ultricies lectus.', 38, '        Integer at turpis ut ex ultrices tristique. Mauris venenatis imperdiet dignissim. Quisque eleifend dui ac neque', 39, '        consectetur, in sollicitudin elit consequat. Sed suscipit mauris nec leo tristique, id lacinia purus aliquam.', 40, '      </p>', 41, '      <p>', 42, '        Duis nisl metus, pellentesque nec egestas nec, finibus eu erat. Morbi mollis, dui in rutrum blandit, tellus', 43, '        mauris vestibulum eros, ac gravida orci augue eget mauris. Maecenas pharetra convallis est placerat lacinia.', 44, '        Curabitur ipsum metus, sagittis vitae efficitur congue, suscipit quis nunc. Integer convallis, nisl sed mattis', 45, '        consectetur, mi nunc rutrum purus, at bibendum quam mi nec elit. Aliquam vulputate posuere ipsum, quis', 46, '        condimentum tortor ultricies vitae. Nunc vitae justo id neque dictum vulputate quis nec enim. Ut a venenatis', 47, '        metus.', 48, '      </p>', 49, '      <p>', 50, '        Etiam ut mattis ligula. Vestibulum a nisl vel magna fermentum sodales et ac metus. Ut cursus libero tincidunt', 51, '        nisl imperdiet, vel vulputate tellus pulvinar. Donec ac nulla tempus, aliquam tellus vitae, ornare velit. Nam', 52, '        quis massa ac elit scelerisque finibus eu ac metus. Nullam faucibus nunc id interdum tincidunt. Maecenas ut', 53, '        neque a justo ultricies pretium. Integer efficitur sit amet est in mattis. Vivamus interdum erat in quam sodales', 54, '        sagittis. Sed laoreet urna at neque volutpat rutrum. Duis id ornare lectus. Praesent in felis vitae tortor', 55, '        viverra congue. Pellentesque commodo diam eu lorem dapibus, ac scelerisque turpis tristique.', 56, '      </p>', 57, '      <p>', 58, '        <strong>', 59, '          You can move nodes with your mouse. Also, clicking the stage will create new nodes, connected to the closest', 60, '          nodes.', 61, '        </strong>', 62, '      </p>', 63, '      <div id=""sigma-container""></div>', 64, '      <p>', 65, '        Duis justo sapien, auctor a ligula eget, iaculis pharetra nulla. In sed malesuada arcu. Quisque viverra tortor', 66, '        sed imperdiet euismod. Aliquam quis sem vitae metus consequat posuere id ornare elit. Donec porttitor nulla id', 67, '        euismod luctus. In euismod a quam a convallis. Vivamus sit amet vehicula sapien, nec vulputate ex. Fusce non', 68, '        enim a felis luctus mattis ac nec nulla.', 69, '      </p>', 70, '      <p>', 71, '        Praesent tortor risus, sagittis at aliquet vel, egestas a ligula. Aliquam euismod lobortis magna, a varius massa', 72, '        tincidunt et. Praesent et ultrices turpis, sed rhoncus quam. Praesent quis congue tortor, sed ultrices mi.', 73, '        Curabitur tincidunt placerat tincidunt. Sed non varius risus. Proin suscipit magna arcu, a congue augue tempor', 74, '        vel. Sed hendrerit nisi a tellus luctus, eu venenatis orci semper. Vestibulum a nulla semper, elementum elit at,', 75, '        consequat nisl. Mauris ipsum mauris, ultrices nec ante et, elementum rhoncus diam. Mauris nisl arcu, maximus at', 76, '        ultricies at, convallis nec justo. Integer congue placerat sem, id ultrices odio porttitor consequat. Vestibulum', 77, '        porttitor tincidunt justo, vel sodales dui imperdiet ut. Mauris eget accumsan sapien, et viverra ante. Donec et', 78, '        turpis et neque euismod sollicitudin. Donec sit amet vulputate felis.', 79, '      </p>', 80, '    </main>']"
dc5c57060b74157558c3d894bb6275de898ccf0d,src/sigma.ts,MODIFY,"[44, 'const { nodeExtent, edgeExtent } = graphExtent;', 114, '  private nodeExtent: { x: Extent; y: Extent; z: Extent } = { x: [0, 1], y: [0, 1], z: [0, 1] };', 115, '  private edgeExtent: { z: Extent } | null = null;', 546, '    if (this.settings.zIndex) {', 547, '      nodeExtentProperties.push(""z"");', 548, '      this.edgeExtent = edgeExtent(graph, [""z""]) as { z: Extent };', 549, '    }', 550, '', 551, '    this.nodeExtent = nodeExtent(graph, nodeExtentProperties) as { x: Extent; y: Extent; z: Extent };', 562, '    // Handling node z-index', 563, '    // TODO: z-index needs us to compute display data before hand', 564, '    if (this.settings.zIndex)', 565, '      nodes = zIndexOrdering<NodeKey>(', 566, '        this.nodeExtent.z,', 567, '        (node: NodeKey): number => graph.getNodeAttribute(node, ""z""),', 568, '        nodes,', 569, '      );', 570, '', 618, '    // Handling edge z-index', 619, '    if (this.settings.zIndex && this.edgeExtent)', 620, '      edges = zIndexOrdering(this.edgeExtent.z, (edge: EdgeKey): number => graph.getEdgeAttribute(edge, ""z""), edges);', 621, '']","[44, 'const { nodeExtent } = graphExtent;', 75, '  if (!data.zIndex) data.zIndex = 0;', 76, '', 89, '  if (!data.zIndex) data.zIndex = 0;', 90, '', 118, '  private nodeExtent: { x: Extent; y: Extent } = { x: [0, 1], y: [0, 1] };', 535, '    const nodeZExtent: [number, number] = [Infinity, -Infinity];', 536, '    const edgeZExtent: [number, number] = [Infinity, -Infinity];', 551, '    this.nodeExtent = nodeExtent(graph, nodeExtentProperties) as { x: Extent; y: Extent };', 583, '      if (this.settings.zIndex) {', 584, '        if (data.zIndex < nodeZExtent[0]) nodeZExtent[0] = data.zIndex;', 585, '        if (data.zIndex > nodeZExtent[1]) nodeZExtent[1] = data.zIndex;', 586, '      }', 587, '    }', 588, '', 589, '    // Handling node z-index', 590, '    // TODO: z-index needs us to compute display data before hand', 591, '    if (this.settings.zIndex && nodeZExtent[0] !== nodeZExtent[1])', 592, '      nodes = zIndexOrdering<NodeKey>(nodeZExtent, (node: NodeKey): number => this.nodeDataCache[node].zIndex, nodes);', 593, '', 594, '    for (let i = 0, l = nodes.length; i < l; i++) {', 595, '      const node = nodes[i];', 596, '      const data = this.nodeDataCache[node];', 597, '', 642, '      if (this.settings.zIndex) {', 643, '        if (data.zIndex < edgeZExtent[0]) edgeZExtent[0] = data.zIndex;', 644, '        if (data.zIndex > edgeZExtent[1]) edgeZExtent[1] = data.zIndex;', 645, '      }', 646, '    }', 647, '', 648, '    // Handling edge z-index', 649, '    if (this.settings.zIndex && edgeZExtent[0] !== edgeZExtent[1])', 650, '      edges = zIndexOrdering(edgeZExtent, (edge: EdgeKey): number => this.edgeDataCache[edge].zIndex, edges);', 651, '', 652, '    for (let i = 0, l = edges.length; i < l; i++) {', 653, '      const edge = edges[i];', 654, '      const data = this.edgeDataCache[edge];', 655, '']"
dc5c57060b74157558c3d894bb6275de898ccf0d,src/types.ts,MODIFY,"[76, '  zIndex?: number;']","[76, '  zIndex: number;']"
0f3dbdf53322b57028ea0d0fe49a594ed83598e2,src/captors/mouse.ts,MODIFY,"[277, '    )', 279, '', 280, '    this.currentWheelDirection = wheelDirection;', 281, '    this.lastWheelTriggerTime = now;']","[277, '    ) {', 279, '    }', 299, '    this.currentWheelDirection = wheelDirection;', 300, '    this.lastWheelTriggerTime = now;', 301, '']"
6fbf53c6e26d304919bff0ef514ca5f94f27e092,examples/build.js,MODIFY,"[2, 'const fs = require(""fs-extra"");', 5, 'const { eachSeries } = require(""async"");', 16, 'fs.mkdirSync(outputDir, { recursive: true });', 17, '', 18, 'const examples = require(""./examples.json"");', 27, '  fs.mkdirSync(outputSubFolder);', 28, '  fs.mkdirSync(path.resolve(outputSubFolder, ""build""));', 29, '  fs.copyFileSync(path.resolve(inputSubFolder, ""index.html""), path.resolve(outputSubFolder, ""index.html""));', 31, '  if (fs.existsSync(path.resolve(inputSubFolder, ""public""))) {', 32, '    fs.mkdirSync(path.resolve(outputSubFolder, ""public""));', 33, '    fs.copySync(path.resolve(inputSubFolder, ""public""), path.resolve(outputSubFolder, ""public""));', 50, '  (example, next) => {', 51, '    buildExample(example.name, next);']","[2, 'const fs = require(""fs"");', 3, 'const fsExtra = require(""fs-extra"");', 7, 'const { eachSeries } = require(""async"");', 17, 'fsExtra.mkdirSync(outputDir, { recursive: true });', 26, '  fsExtra.mkdirSync(outputSubFolder);', 27, '  fsExtra.mkdirSync(path.resolve(outputSubFolder, ""build""));', 28, '  fsExtra.copyFileSync(path.resolve(inputSubFolder, ""index.html""), path.resolve(outputSubFolder, ""index.html""));', 30, '  if (fsExtra.existsSync(path.resolve(inputSubFolder, ""public""))) {', 31, '    fsExtra.copySync(path.resolve(inputSubFolder, ""public""), outputSubFolder);', 46, '// List all examples:', 47, 'const notExamples = new Set([""build"", ""node_modules""]);', 48, 'const examples = fs', 49, '  .readdirSync(""./"", { withFileTypes: true })', 50, '  .filter(', 51, '    (dirent) =>', 52, '      dirent.isDirectory() &&', 53, '      !notExamples.has(dirent.name) &&', 54, '      fs.existsSync(path.resolve(__dirname, dirent.name, ""index.ts"")),', 55, '  )', 56, '  .map((dirent) => dirent.name);', 57, '', 60, '  (name, next) => {', 61, '    buildExample(name, next);']"
